{"pageProps":{"q":[{"question":"한 번에 하나의 프로세스의 실행만 허용하는 시스템을 ___라 부른다.","choices":["Uniprogramming system","Uniprocessor system","Unitasking system","Universal system"],"answer":2,"explanation":"한 개의 프로세서를 뜻하는 단일 프로세서(uniprocessor)가 정답입니다. 단일 프로그래밍 시스템(uniprogramming system)은 한 번에 하나의 프로그램에 대한 메모리만 로드할 수 있는 시스템입니다. 하나의 프로세서로도 한 번에 하나 이상의 프로그램들을 실행가능하게 만드는 시스템은 다중 프로그래밍 시스템(multiprogramming system)이라 합니다.","references":[{"Uniprocessor system":"https://en.wikipedia.org/wiki/Uniprocessor_system"}]},{"question":"운영체제에서 각 프로세스는 자신의 ___를 가진다.","choices":["프로세스 상태(process state)","프로그램 카운터(program counter)","프로세스에서 연 파일들에 대한 정보","위에 언급된 모두 해당"],"answer":4,"explanation":"여러 프로세스가 전환되어가며 실행될 수 있기때문에, 프로세스마다 서로 다른 실행 환경을 각자 저장하고 있습니다. 저장하는 구조체의 이름을 PCB(Process Control Block)라고 합니다. PCB에는 프로세스 상태(process state), 프로그램 카운터(program counter), 범용 레지스터(general register), 프로세스에서 연 파일들에 대한 정보 그리고 시그널 핸들러(signal handler) 등을 포함합니다.","references":[{"[한] PCB":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EC%A0%9C%EC%96%B4_%EB%B8%94%EB%A1%9D"},{"PCB":"https://en.wikipedia.org/wiki/Process_control_block"}]},{"question":"유닉스(Unix)에서 새로운 프로세스를 만드는 시스템 콜은 무엇인가?","choices":["fork","create","new","generate"],"answer":1,"explanation":"'fork'는 호출한 프로세스를 복제하여 새로운 프로세스를 만드는 시스템 콜입니다. 호출한 프로세스는 부모 프로세스로 생성된 프로세스는 자식 프로세스로 언급됩니다. 스레드가 아니라 프로세스이기 때문에 분리된 메모리 영역을 가지고 실행됩니다.","references":[{"fork":"https://en.wikipedia.org/wiki/Fork_(system_call)"}]},{"question":"프로세스는 ___에 의해 종료될 수 있다.","choices":["Normal exit","Fatal error","다른 프로세스","위에 언급된 모두 해당"],"answer":4,"explanation":"-","references":[{"[한] Process":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4"},{"Process":"https://en.wikipedia.org/wiki/Process_(computing)"}]},{"question":"프로세스의 상태(state) 중 ready에 해당하는 것은?","choices":["실행 후 다음 실행을 위해 스케줄 된 상태","어떤 태스크(task)가 완료될 때까지 실행할 수 없는 상태","CPU를 사용하고 있는 상태","위에 언급된 모두 해당 안됨"],"answer":1,"explanation":"(2)는 blocked에 대한 설명이며 (3)은 running에 대한 설명입니다.","references":[{"[한] Process state":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98_%EC%83%81%ED%83%9C"},{"Process state":"https://en.wikipedia.org/wiki/Process_state"}]},{"question":"프로세스의 스택(stack)이 포함하지 않는 것은?","choices":["함수 매개변수(function parameter)","지역 변수(local variable)","복귀 주소(return address)","자식 프로세스의 PID"],"answer":4,"explanation":"프로세스의 스택은 콜 스택(call stack)이라 하여 실행 중인 컨텍스트를 저장하고 제어하기 위해 쓰입니다. 다양하게 활용되지만 주 용도 중 하나는 함수의 호출과 복귀입니다.\n함수 호출이 완료됐을 때 현재 위치로 돌아오기 위해 복귀 주소를 스택에 넣습니다. 다음으로 매개변수를 요구하는 함수일 경우 전달하기 위해 스택에 넣습니다. 호출된 함수는 필요에 따라 스택을 추가적으로 활용하기도 하는데 지역 변수도 이에 포함됩니다.\n자식 프로세스의 ID(PID)를 포함하여 자신의 PID 등 프로세스에 대한 정보는 PCB(Process Control Block)에 저장됩니다. PCB는 운영체제가 관리하기에 콜 스택이 아닌 운영체제가 가진 풀(pool)에 속합니다.","references":[{"[한] Call stack":"https://ko.wikipedia.org/wiki/%EC%BD%9C_%EC%8A%A4%ED%83%9D"},{"Call stack":"https://en.wikipedia.org/wiki/Call_stack"}]},{"question":"종료된 자식 프로세스(child process)의 정보를 얻어올 수 있는 시스템 콜(system call)은?","choices":["wait","exit","fork","get"],"answer":1,"explanation":"'wait'은 자식 프로세스가 종료되기를 기다렸다가, 종료되면 자식 프로세스의 PID와 종료된 상태를 반환합니다. 종료된 상태는 종료가 정상적이었는지, 비정상적이었는지 또는 시그널을 받아 종료되었는지 등의 다양한 정보를 포함합니다.","references":[{"wait":"https://en.wikipedia.org/wiki/Wait_(system_call)"},{"exit":"https://en.wikipedia.org/wiki/Exit_(system_call)"},{"fork":"https://en.wikipedia.org/wiki/Fork_(system_call)"}]},{"question":"PCB(Process Control Block)에 포함되지 않는 것은?","choices":["프로세스 상태(process state)","프로그램 카운터(program counter)","스택(stack)","페이지 테이블 포인터(page table pointer)"],"answer":3,"explanation":"PCB에는 레지스터의 값 들도 포함됩니다. 레지스터 중에는 콜 스택을 추적하기위한 SP(Stack Pointer)도 포함됩니다. 다만 SP는 포인터일 뿐이고 스택 그 자체는 아닙니다.\n비슷하게 PCB는 페이지 테이블에 대해서도 포인터를 가지고 있고 페이지 테이블 자체는 운영체제에 의해 커널 공간에서 관리됩니다.","references":[{"[한] PCB":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EC%A0%9C%EC%96%B4_%EB%B8%94%EB%A1%9D"},{"PCB":"https://en.wikipedia.org/wiki/Process_control_block"}]},{"question":"단위 시간동안 완료된 프로세스의 수를 ___라 한다.","choices":["Output","Throughput","Efficiency","Capacity"],"answer":2,"explanation":"-","references":[{"Throughput and Capacity":"https://www.weibull.com/hotwire/issue27/relbasics27.htm"}]},{"question":"프로세스의 상태(state)는 ___ 라고 볼 수 있다.","choices":["프로세스의 최종 활동","프로세스가 막 실행한 활동","프로세스가 다음에 실행할 활동","프로세스의 현재 활동"],"answer":4,"explanation":"프로세스는 현재 상태에 따라 스케줄링되어야 하므로 프로세스의 상태는 메인 메모리 상에서 운영체제에 의해 지속적으로 관리됩니다. 유한 상태 기계(Finite State Machine, FSM)로 정의되기 때문에 이전 상태와 활동으로부터 전이됩니다. 따라서 막 수행한 활동이 관련은 있지만 현재 상태라고는 볼 수 없습니다. 현재의 상태는 현재의 활동으로 보아야 합니다.","references":[{"[한] Process state":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98_%EC%83%81%ED%83%9C"},{"Process state":"https://en.wikipedia.org/wiki/Process_state"}]},{"question":"다음 중 프로세스의 상태(state)가 아닌 것은?","choices":["New","Old","Waiting","Running"],"answer":2,"explanation":"프로세스의 상태는 생성(new 또는 created),  실행(running), 준비(ready), 대기(waiting 또는 blocked), 종료(terminated)의 다섯 가지가 있습니다. '생성'은 생성 직후의 상태입니다. '실행'은 실행 중인 상태, '준비'는 실행될 수 있는 상태입니다. '대기'는 I/O 등의 인터럽트를 기다려야해서 실행될 수 없는 상태입니다. 프로세스가 수행을 마치거나 강제로 종료되었을 때 '종료' 상태가 됩니다. Old 상태는 정의되어 있지 않습니다.","references":[{"[한] Process state":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98_%EC%83%81%ED%83%9C"},{"Process state":"https://en.wikipedia.org/wiki/Process_state"}]},{"question":"PCB(Process Control Block)란?","choices":["프로세스 타입 변수","자료 구조","보조 기억장치의 일부","메모리 블럭"],"answer":2,"explanation":"PCB는 프로세스를 제어하기 위한 다양한 정보들을 저장하기 위한 자료 구조입니다. 프로세스의 ID와 프로세스가 전환될 때의 상황을 복구하기 위해 프로그램 카운터를 포함한 레지스터들의 값을 저장합니다. 또한 스케줄링에 필요한 프로세스의 상태, 우선 순위, CPU 소모 시간 등을 저장합니다. 운영체제의 특성에 따라 다양하게 정의되기에 운영체제마다 구현이 다를 수 있습니다.","references":[{"[한] PCB":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EC%A0%9C%EC%96%B4_%EB%B8%94%EB%A1%9D"},{"PCB":"https://en.wikipedia.org/wiki/Process_control_block"}]},{"question":"모든 PCB들은 ___에 속하여 관리되어진다.","choices":["Process register","Program counter","Process table","Process unit"],"answer":3,"explanation":"프로세스 테이블은 실행 중인 프로세스들을 위한 PCB의 배열로 커널에서 사용되는 자료 구조입니다.","references":[{"[한] PCB":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EC%A0%9C%EC%96%B4_%EB%B8%94%EB%A1%9D"},{"Process table and PCB":"https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/"}]},{"question":"다중 프로그래밍의 정도(the degree of multiprogramming)를 판단할 수 있는 요소는?","choices":["단위 시간 내에 실행된 프로세스의 수","준비 큐(ready queue)에 존재하는 프로세스의 수","대기 큐(waiting queue)에 존재하는 프로세스의 수","메모리에 존재하는 프로세스의 수"],"answer":4,"explanation":"다중 프로그래밍의 정도란 한 프로세서가 얼마나 많은 프로그램을 수행할 수 있는지로 볼 수 있습니다. 우선 단위 시간 내에 실행된 수는 적절하지 않습니다. 왜냐하면 다중 프로그래밍의 정도가 높더라도 실제 실행된 프로세스의 수는 적을 수도 있기 때문입니다. 예를 들어 대부분의 프로세스가 I/O 응답을 기다리고 있었다면, 역량이 되는데도 불구하고 동시에 실행되는 프로세스의 수는 적을 수 있습니다.\n프로세스가 메모리에 적재되었다는 것은 다중 프로그래밍의 대상이 될 수 있다는 얘기이므로 (4)가 정답입니다. Ready queue 또는 waiting queue 둘 중 하나가 아닌 전부 고려되어야 합니다.\n이외에 the degree of multiprogramming에 영향을 주는 요소로는 예시에서 언급되었던 I/O bound와 CPU bound 그리고 메모리의 접근 속도 등이 있습니다.","references":[{"The degree of multiprogramming":"https://owd.tcnj.edu/~coburn/os"},{"[한] Multiprogramming":"https://ko.wikipedia.org/wiki/%EB%8B%A4%EC%A4%91_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D"},{"Multiprogramming":"https://en.wikipedia.org/wiki/Computer_multitasking#Multiprogramming"}]},{"question":"단일 스레드(single thread) 환경 하에서 프로세스는 ___를 처리할 수 있다.","choices":["한 번에 하나의 태스크(task)","한 번에 두 개의 태스크","한 번에 두 개 이상의 태스크","위에 언급된 모두 해당 안됨"],"answer":1,"explanation":"스레드(thread)는 실행 단위이며 태스크(task)는 작업 단위입니다. 따라서 단일 스레드란 스레드 풀(thread pool)에 스레드가 하나만 있는 것을 의미하며 이는 동시에 하나의 태스크만 실행할 수 있음을 의미합니다.","references":[{"[한] Task":"https://ko.wikipedia.org/wiki/%ED%83%9C%EC%8A%A4%ED%81%AC"},{"Task":"https://en.wikipedia.org/wiki/Task_(computing)"}]},{"question":"다중 프로그래밍(multiprogramming)의 목적은?","choices":["프로세스들을 항상 실행시키기 위함","큐(queue)에 대기하고있는 복수의 프로그램들을 실행시킬 준비를 하기 위함","CPU 활용도를 최소화하기 위함","위에 언급된 모두 해당 안됨"],"answer":1,"explanation":"단일 프로그램만 수행할 경우 I/O가 있을 때 프로그램 수행을 멈추고 인터럽트를 기다려야해서 대기하는 동안 CPU를 활용하지 못하는 비효율이 발생합니다. 이에 대기하는 시간에 다른 프로그램을 실행시켜 CPU 활용 효율을 개선하고자 제안된 것이 다중 프로그래밍(multiprogramming)입니다.","references":[{"[한] Multiprogramming":"https://ko.wikipedia.org/wiki/%EB%8B%A4%EC%A4%91_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D"},{"Multiprogramming":"https://en.wikipedia.org/wiki/Computer_multitasking"}]},{"question":"RPC(Remote Procedure Call)는 ___ 하기위해 사용된다.","choices":["같은 프로그램 내의 프로시저를 호출","같은 시스템 내의 프로시저를 호출","시스템 상관없이 프로시저를 호출","IPC가 지원하지 못하는 부분을 보충"],"answer":3,"explanation":"RPC는 별도의 원격 제어를 위한 코딩없이 다른 주소 공간에 있는 프로시저를 실행시키는 기법으로, 프로시저가 로컬에 있든 원격에 있든 상관없이 동일하게 실행할 수 있는 추상화 인터페이스를 프로그래머에 제공합니다. RPC는 IPC의 한 형태이므로 (4)는 틀린 설명입니다.","references":[{"[한] RPC":"https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C"},{"RPC":"https://en.wikipedia.org/wiki/Remote_procedure_call"}]},{"question":"RPC는 별도의 원격 제어없이 다른 주소 공간의 프로시저를 호출하기위해 ___를 제공한다.","choices":["Identifier","Stub","Alias","Process"],"answer":2,"explanation":"스텁(stub)은 일반적으로 RPC를 위해 자동생성되어지는 코드를 말합니다. 호출 시 클라이언트 사이드 스텁에서는 매개변수(parameter)를 패킹(packing) 혹은 마샬링(marshalling)하고, 서버 사이드 스텁(혹은 skeleton)에서는 언패킹(unpacking) 혹은 언마샬링(unmarshalling)하여 매개변수를 전달받습니다. 응답 시에는 위 과정을 반대 순서로 진행합니다.","references":[{"[한] RPC":"https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C"},{"RPC":"https://en.wikipedia.org/wiki/Remote_procedure_call"},{"stub":"https://en.wikipedia.org/wiki/Stub_(distributed_computing)"}]},{"question":"클라이언트 사이드 스텁(stub)이 하는 것은?","choices":["서버 사이드에 메시지 전달","전달할 매개변수 marshalling","전달받은 응답 unmarshalling","위에 언급된 모두 해당"],"answer":4,"explanation":"-","references":[{"stub":"https://en.wikipedia.org/wiki/Stub_(distributed_computing)"},{"Marshalling":"https://en.wikipedia.org/wiki/Marshalling_(computer_science)"},{"Unmarshalling":"https://en.wikipedia.org/wiki/Marshalling_(computer_science)#Unmarshalling"}]},{"question":"RMI란?","choices":["Remote Memory Installation","Remote Memory Invocation","Remote Method Installation","Remote Method Invocation"],"answer":4,"explanation":"-","references":[{"RMI":"https://en.wikipedia.org/wiki/Distributed_object_communication"},{"Java RMI":"https://en.wikipedia.org/wiki/Java_remote_method_invocation"}]},{"question":"스레드를 생성한 프로세스와 그 스레드에 대한 설명으로 틀린 것은?","choices":["같은 코드를 공유한다.","서로 다른 프로그램 카운터(program counter)를 가진다.","서로 다른 콜 스택(call stack)을 사용한다.","서로 다른 메모리 영역을 사용한다."],"answer":4,"explanation":"스레드를 생성한 프로세스와 그 프로세스는 서로 다른 컨텍스트를 갖게 되므로 서로 다른 콜 스택을 가지지만, 멀티프로세스와 달리 메모리 영역은 공유합니다.","references":[{"[한] Process":"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4"},{"Process":"https://en.wikipedia.org/wiki/Process_(computing)"},{"[한] Thread":"https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%8C%85)"},{"Thread":"https://en.wikipedia.org/wiki/Thread_(computing)"},{"[한] Call stack":"https://ko.wikipedia.org/wiki/%EC%BD%9C_%EC%8A%A4%ED%83%9D"},{"Call stack":"https://en.wikipedia.org/wiki/Call_stack"}]},{"question":"스레드에 대한 설명으로 맞는 것은?","choices":["사용자 레벨 스레드(user-level thread)보다 커널 레벨 스레드(kernel-level)가 항상 빠르다.","커널 레벨 스레드보다 사용자 레벨 스레드가 항상 빠르다.","사용자 레벨 스레드는 한 스레드가 I/O 처리때문에 대기 상태가 된다면 나머지 스레드로 전환할 수 없다.","커널 레벨 스레드는 사용자 레벨 스레드보다 생성 및 관리 비용이 낮다."],"answer":3,"explanation":"사용자 레벨 스레드는 커널이 인지할 수 없는 실행 단위이기 때문에 I/O 처리 등 대기 상태가 될 경우, 스레드뿐만 아니라 프로세스 전체가 대기 상태가 됩니다. 반면 커널 레벨 스레드(kernel-level thread)는 스레드 단위로 상태가 관리되기 때문에, 대기해야 하는 스레드 외의 스레드들은 계속 실행될 수 있어 블로킹이 많은 상황에서는 커널 레벨 스레드가 빠릅니다. 하지만 사용자 레벨 스레드에 비해 생성 및 관리가 느려 일반적인 상황에서는 사용자 레벨 스레드가 더 빠릅니다.","references":[{"[한] Thread":"https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%8C%85)"},{"Thread":"https://en.wikipedia.org/wiki/Thread_(computing)"}]},{"question":"CPU bound란 ___ 것을 말한다.","choices":["수행 완료 시간이 CPU의 영향을 받지 않는","수행 완료 시간이 CPU의 속도에 의해 정해지는","수행 완료 시간이 I/O의 영향을 받지 않는","유휴 시간(idle time)이 CPU의 속도에 의해 정해지는"],"answer":2,"explanation":"CPU bound란 태스크(task)의 수행 완료 시간이 CPU의 속도에 의해 결정되는 것을 말합니다. 달리 말해, CPU가 병목 구간(bottleneck)이라고 할 수 있습니다. 예를 들어, 대기 상태로 전환되는 시스템 콜 호출이 없거나 적고 순수 연산만 많은 프로그램이 해당될 수 있습니다.","references":[{"CPU bound":"https://en.wikipedia.org/wiki/CPU-bound"}]},{"question":"I/O bound란 ___ 것을 말한다.","choices":["유휴 시간(idle time)이 I/O에 의해서만 생기는","I/O를 사용하지 않도록 구현된","수행 완료 시간이 I/O 대기 시간에 의해 정해지는","수행 완료 시간이 I/O의 영향을 받지 않는"],"answer":3,"explanation":"I/O bound란 태스크(task)의 수행 완료 시간이 I/O 처리를 위해 쓰이는 시간에 의해 결정되는 것을 말합니다. 달리 말해, I/O가 병목 구간(bottleneck)이라고 할 수 있습니다. CPU bound와 반대되는 개념으로, I/O를 위한 처리가 많아 대기 큐(waiting queue)에 빈번하게 들어가는 경우라고 볼 수도 있습니다.","references":[{"I/O bound":"https://en.wikipedia.org/wiki/I/O_bound"},{"CPU bound":"https://en.wikipedia.org/wiki/CPU-bound"}]}]},"__N_SSG":true}