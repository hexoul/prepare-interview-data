{"pageProps":{"q":[{"question":"같은 프로세스가 non-recursive mutex를 두 번 이상 취득하려 시도할 때 발생하는 일은?","choices":["기아 상태(Starvation)","교착 상태(Deadlock)","Aging","Signaling"],"answer":2,"explanation":"Non-recursive mutex는 재진입이 불가능한 뮤텍스(mutex)를 말합니다. 이 경우, 첫 락(lock)에서는 뮤텍스를 문제없이 취득하지만 두 번째 락에서는 뮤텍스를 놓지않은 채 재취득하려는 시도만 있기 때문에 오도 가도 못하는 상황이 되어 교착 상태가 발생합니다.","references":[{"[한] Starvation":"https://ko.wikipedia.org/wiki/%EA%B8%B0%EC%95%84_%EC%83%81%ED%83%9C"},{"Starvation":"https://en.wikipedia.org/wiki/Starvation_(computer_science)"},{"[한] Deadlock":"https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C"},{"Deadlock":"https://en.wikipedia.org/wiki/Deadlock"},{"Aging":"https://en.wikipedia.org/wiki/Aging_(scheduling)"},{"Recursive mutex":"https://en.wikipedia.org/wiki/Reentrant_mutex"}]},{"question":"세마포어란?","choices":["이진 뮤텍스(Binary mutex)이다.","오직 한 프로세스로부터만 접근되어야 한다.","여러 프로세스로부터 접근될 수 있다.","위에 언급된 모두 해당 안됨"],"answer":3,"explanation":"세마포어는 동시 접근을 제어하기 위해 사용되는 변수로 여러 프로세스로부터 접근될 수 있습니다.\n참고로 이진 뮤텍스(binary mutex)라는 말은 없습니다. 이진 세마포어(Binary semaphore)가 뮤텍스(mutex)와 유사하게 동작할 수는 있으나, 동의어는 아니니 유의해야 합니다.","references":[{"[한] Semaphore":"https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4"},{"Semaphore":"https://en.wikipedia.org/wiki/Semaphore_(programming)"}]},{"question":"세마포어의 두 종류는?","choices":["뮤텍스(mutex)와 계수(counting)","이진(binary)과 계수(counting)","뮤텍스(mutex)와 이진(binary)","스핀(spin)과 이진(binary)"],"answer":2,"explanation":"세마포어가 0 또는 1만 가리키는 것을 이진 세마포어(binary semaphore)라 하고 이외에는 계수 세마포어(counting semaphore)라 합니다.","references":[{"[한] Semaphore":"https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4"},{"Semaphore":"https://en.wikipedia.org/wiki/Semaphore_(programming)"}]},{"question":"뮤텍스(Mutex)란?","choices":["이진 세마포어(Binary semaphore)이다.","해제는 오직 한 프로세스로부터만 접근되어야 한다.","해제 시 여러 프로세스로부터 접근될 수 있다.","위에 언급된 모두 해당 안됨"],"answer":2,"explanation":"이진 세마포어는 세마포어를 감소시켰던 프로세스가 아닌 다른 프로세스도 세마포어를 증가시킬 수 있는 것에 반해, 뮤텍스(mutex)는 락(lock)을 취득했던 프로세스 또는 스레드가 직접 해제해야 한다는 차이가 있습니다. 따라서 뮤텍스는 엄밀하게 말하여 이진 세마포어와는 다릅니다.","references":[{"[한] Mutex":"https://ko.wikipedia.org/wiki/%EC%83%81%ED%98%B8_%EB%B0%B0%EC%A0%9C"},{"Mutex":"https://en.wikipedia.org/wiki/Lock_(computer_science)"},{"[한] Semaphore":"https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4"},{"Semaphore":"https://en.wikipedia.org/wiki/Semaphore_(programming)"}]},{"question":"특정 시점에 계수 세마포어(counting semaphore)의 값이 7이었다면, 20 번의 P operation과 15 번의 V operation 후에 값이 어떻게 변경되는가?","choices":["2","7","12","42"],"answer":1,"explanation":"세마포어(semaphore)에서 P operation은 값을 1 감소시키는 wait operation에 해당하고, V operation은 값을 1 증가시키는 signal operation에 해당합니다. 따라서 7 - 20 + 15가 되어 답은 2가 됩니다.","references":[{"[한] Semaphore":"https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4"},{"Semaphore":"https://en.wikipedia.org/wiki/Semaphore_(programming)"}]},{"question":"유한 버퍼(Bounded buffer) 문제는 ___ 문제라고도 알려져 있다.","choices":["독자-저자(Readers-writers)","생산자-소비자(Producer-consumer)","철학자들의 만찬(Dining philosophers)","잠자는 이발사(Sleeping barber)"],"answer":2,"explanation":"-","references":[{"[한] Readers-writers problem":"https://ko.wikipedia.org/wiki/%EB%8F%85%EC%9E%90-%EC%A0%80%EC%9E%90_%EB%AC%B8%EC%A0%9C"},{"Readers-writers problem":"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem"},{"[한] Producer-consumer problem":"https://ko.wikipedia.org/wiki/%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90_%EB%AC%B8%EC%A0%9C"},{"Producer-consumer problem":"https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem"},{"[한] Dining philosophers problem":"https://ko.wikipedia.org/wiki/%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94_%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4_%EB%AC%B8%EC%A0%9C"},{"Dining philosophers problem":"https://en.wikipedia.org/wiki/Dining_philosophers_problem"},{"[한] Sleeping barber problem":"https://ko.wikipedia.org/wiki/%EC%9E%A0%EC%9E%90%EB%8A%94_%EC%9D%B4%EB%B0%9C%EC%82%AC_%EB%AC%B8%EC%A0%9C"},{"Sleeping barber problem":"https://en.wikipedia.org/wiki/Sleeping_barber_problem"}]},{"question":"유한 버퍼(Bounded buffer) 문제에 대한 설명으로 틀린 것은?","choices":["문제해결에 비어있는 버퍼와 사용될 수 있는 버퍼의 수에 대한 세마포어가 사용될 수 있다.","유한한 N 개의 버퍼를 가지고 있다.","세마포어만으로 이 문제를 완벽하게 해결할 수 있다.","생산자(Producer)가 아이템을 큐(queue)에 넣는 속도와 소비자(consumer)가 큐에서 아이템을 빼는 속도가 같다면, 유한 버퍼 문제(bounded buffer problem)는 발생하지 않는다."],"answer":3,"explanation":"생산자(Producer)와 소비자(consumer)가 각각 하나만 있다면 세마포어(semaphore)만으로 해결 가능합니다. 하지만 복수의 생산자 또는 소비자가 있다면 경쟁 상태(race condition)로부터 교착 상태(deadlock)가 발생할 수 있습니다. 이 경우 문제해결에 뮤텍스(mutex)도 요구됩니다.","references":[{"[한] Producer-consumer problem":"https://ko.wikipedia.org/wiki/%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90_%EB%AC%B8%EC%A0%9C"},{"Producer-consumer problem":"https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem"}]},{"question":"독자-저자 문제(Readers-writers problem)에서 ___는 공유 객체에 배타적으로(exclusive) 접근해야 한다.","choices":["독자(Reader)","저자(Writer)","독자(Reader)와 저자(writer)","프로세스(Process)"],"answer":3,"explanation":"읽기 중에 쓰거나 쓰기 중에 읽는 경우 모두 불일치(inconsistency)를 발생시킬 수 있으므로, 독자(reader)와 저자(writer) 모두 공유 객체에 대해 배타적으로 접근해야 합니다.","references":[{"[한] Reader-writer problem":"https://ko.wikipedia.org/wiki/%EB%8F%85%EC%9E%90-%EC%A0%80%EC%9E%90_%EB%AC%B8%EC%A0%9C"},{"Reader-writer problem":"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem"}]},{"question":"식사하는 철학자들(Dining philosophers) 문제가 발생하는 경우는?","choices":["3명의 철학자들과 5개의 젓가락","4명의 철학자들과 5개의 젓가락","5명의 철학자들과 5개의 젓가락","5명의 철학자들과 6개의 젓가락"],"answer":3,"explanation":"철학자의 수보다 젓가락의 수가 같거나 작으면 해당 문제가 발생할 수 있습니다. 젓가락이 한개라도 많고 자원에 접근하는 순서가 보장된다면 무한정 대기하는 상황에는 빠지지 않습니다.","references":[{"[한] Dining philosophers problem":"https://ko.wikipedia.org/wiki/%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94_%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4_%EB%AC%B8%EC%A0%9C"},{"Dining philosophers problem":"https://en.wikipedia.org/wiki/Dining_philosophers_problem"}]},{"question":"다음 중 식사하는 철학자들(Dining philosophers) 문제의 해법이 아닌 것은?","choices":["Resource hierarchy solution","Arbitrator solution","Dijkstra's algorithmm","Chandy–Misra–Haas algorithm"],"answer":3,"explanation":"Dijkstra's algorithm은 최단 경로를 찾는 알고리즘입니다.\nResource hierarchy solution도 Dijkstra에 의해 제안되었고 자원 간 경로를 기반으로 해결한다는 점에서 유사하게 보일 수 있으나, 최단 경로를 찾는 해법만으로는 환형 대기를 회피할 수 없습니다.","references":[{"[한] Dining philosophers problem":"https://ko.wikipedia.org/wiki/%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94_%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4_%EB%AC%B8%EC%A0%9C"},{"Dining philosophers problem":"https://en.wikipedia.org/wiki/Dining_philosophers_problem"},{"Resource hierarchy solution":"https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution"},{"Arbitrator solution":"https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution"},{"Dijkstra's algorithm":"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"},{"Chandy–Misra–Haas algorithm":"https://en.wikipedia.org/wiki/Chandy%E2%80%93Misra%E2%80%93Haas_algorithm_resource_model"}]},{"question":"세마포어를 P-CS-V 순이 아니라, V-CS-P 순으로 사용하면 어떤 일이 발생하는가?","choices":["Deadlock이 발생한다.","Starvation이 발생한다.","Inconsistency가 발생한다.","Interrupt가 발생한다."],"answer":3,"explanation":"P는 wait operation, V는 signal operation, CS는 critical section입니다. 정상적인 경우라면 P부터 실행하여 허가를 받고 CS에 진입하여야 하지만, V부터 실행하게 된다면 호출한 프로세스도 대기하지않고 대기 중이었던 프로세스마저 하나 해제시켜버립니다. 따라서 되려 동시 접근을 늘려 inconsistency가 발생할 수 있습니다.","references":[{"[한] Semaphore":"https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4"},{"Semaphore":"https://en.wikipedia.org/wiki/Semaphore_(programming)"}]},{"question":"___하면 환형 대기(circular wait)를 방지할 수 있다.","choices":["자원 유형에 따른 사용 순서를 정의","Thread를 사용","Pipe를 사용","Socket을 사용"],"answer":1,"explanation":"자원 유형에 따른 사용 순서의 정의는 resource hierarchy solution에 해당하는 설명입니다. 이는 교착 상태의 조건 중 circular wait을 방지하는데 쓰일 수 있습니다.","references":[{"[한] Deadlock":"https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C"},{"Deadlock":"https://en.wikipedia.org/wiki/Deadlock"}]},{"question":"다음 중 교착 상태 회피 알고리즘은?","choices":["Round-robin algorithm","Banker's algorithm","Elevator algorithm","Karn's algorithm"],"answer":2,"explanation":"은행원 알고리즘(banker's algorithm)은 Dijkstra에 의해 개발된 교착 상태 회피 알고리즘(deadlock avoidance algorithm)입니다. 이 알고리즘은 운영체제가 교착 상태에 빠지지 않는 안전한 상태를 유지하면서 유한한 자원을 할당하도록 개발되었습니다.","references":[{"Banker's algorithm":"https://en.wikipedia.org/wiki/Banker%27s_algorithm"},{"[한] Deadlock":"https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C"},{"Deadlock":"https://en.wikipedia.org/wiki/Deadlock"}]}]},"__N_SSG":true}