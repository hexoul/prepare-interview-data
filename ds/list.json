{
  "questions": [
    {
      "question": "Array에 대한 적절한 설명은?",
      "choices": [
        "계층적인 구조를 가진다.",
        "일반적으로 같은 타입으로만 이루어진다.",
        "불변성 (immutability) 을 가진다.",
        "위에 언급된 모두 해당"
      ],
      "answer": 2,
      "explanation": "Array는 선형 구조이며, 변경이 가능하므로 immutable이 아니라 mutable입니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"},
        {"Immutability": "https://en.wikipedia.org/wiki/Immutable_object"}
      ]
    },
    {
      "question": "Array 첫번째 요소의 인덱스는?",
      "choices": [
        "-1",
        "0",
        "1",
        "2"
      ],
      "answer": 2,
      "explanation": "Array뿐만 아니라 컴퓨터에서 인덱스는 일반적으로 0으로 시작합니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"}
      ]
    },
    {
      "question": "Array에서 IndexOutOfBoundsException은 언제 발생할 수 있는가?",
      "choices": [
        "Compile time",
        "Runtime",
        "비정상 종료 시",
        "발생하지 않는다."
      ],
      "answer": 2,
      "explanation": "Array의 범위를 벗어나는 인덱스에 실제로 접근하려할 때 발생하므로, 컴파일과는 관계없이 프로그램 실행 중인 런타임에 발생할 수 있습니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"},
        {"Compile time": "https://en.wikipedia.org/wiki/Compile_time"},
        {"Runtime": "https://en.wikipedia.org/wiki/Runtime_(program_lifecycle_phase)"}
      ]
    },
    {
      "question": "int의 크기가 4 bytes 라면, 'int arr[10]'로 선언된 arr의 크기는?",
      "choices": [
        "10 bytes",
        "14 bytes",
        "40 bytes",
        "44 bytes"
      ],
      "answer": 3,
      "explanation": "10개의 요소가 저장될 수 있는 크기를 나타내므로 10 * 4로 계산할 수 있습니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"}
      ]
    },
    {
      "question": "int의 크기가 4 bytes 이고 'int arr[10]'로 선언됐다면 arr[10]의 크기는?",
      "choices": [
        "0 byte",
        "4 bytes",
        "10 bytes",
        "40 bytes"
      ],
      "answer": 1,
      "explanation": "'[10]'은 인덱스가 10에 해당하는 요소를 선택하는 문법입니다. 그런데 위와 같이 선언됐을 경우 array의 길이는 10이지만 인덱스가 0부터 시작하여 9까지만 존재합니다. 따라서 인덱스가 10인 요소는 존재하지 않는다는 것을 알 수 있습니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"}
      ]
    },
    {
      "question": "다음 중 어떤 개념에서 array를 활용할 여지가 있는가?",
      "choices": [
        "Binary tree",
        "Process scheduling",
        "Caching",
        "Spatial locality"
      ],
      "answer": 4,
      "explanation": "Array는 선형 구조로 메모리 상의 연속된 블록에 저장되므로, OS가 spatial locality를 고려하여 데이터를 추가적으로 가져올 때 도움이 됩니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"},
        {"Locality": "https://en.wikipedia.org/wiki/Locality_of_reference"}
      ]
    },
    {
      "question": "집합이 물리적으로 연속된 공간에 저장되지않고 각 요소가 다음 요소를 가리키는 포인터를 가지고 있는 선형 집합을 ___라 한다.",
      "choices": [
        "Node list",
        "Array list",
        "Linked list",
        "Unordered list"
      ],
      "answer": 3,
      "explanation": "-",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"}
      ]
    },
    {
      "question": "단일 연결 리스트 (singly linked list) 와 head 포인터가 있을 때, 리스트의 제일 앞에 삽입하는 시간 복잡도는 ___이고, 제일 뒤에 삽입하는 시간 복잡도는 ___이다.",
      "choices": [
        "O(1), O(1)",
        "O(1), O(n)",
        "O(n), O(1)",
        "O(n), O(n)"
      ],
      "answer": 2,
      "explanation": "제일 앞에 삽입하는 것은 head 포인터를 통해 바로 가능하지만, 제일 뒤에 삽입하는 것은 tail 포인터가 없기 때문에 head에서부터 마지막까지 탐색하여야 해서 O(n)이 됩니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"},
        {"점근 표기법 (asymptotic notation)": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "Linked list의 기본 단위인 노드 (node)는 실제 데이터 값과 ___를 저장하고 있다.",
      "choices": [
        "Head pointer",
        "Tail pointer",
        "Node pointer",
        "Node"
      ],
      "answer": 3,
      "explanation": "Head 또는 tail 포인터는 linked list 자체에는 포함되지않는 외부 요소입니다. 노드는 물리적으로 연속된 공간에 저장된 것이 아니기 때문에 또 다른 노드를 내부적으로 저장하는 경우는 없고 다음 노드가 저장된 주소만 가지고 있습니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"}
      ]
    },
    {
      "question": "Linked list의 탐색 시간 복잡도는?",
      "choices": [
        "O(1)",
        "O(n)",
        "O(n^2)",
        "O(n^3)"
      ],
      "answer": 2,
      "explanation": "Linked list는 선형 자료구조이기 때문에 특별한 장치를 두지 않는 한 선형 검색만 가능합니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"},
        {"점근 표기법 (asymptotic notation)": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "n번째에 있는 아이템을 탐색할 때 가장 좋은 방법은?",
      "choices": [
        "단일 연결 리스트 (singly linked list)",
        "이중 연결 리스트 (doubly linked list)",
        "원형 연결 리스트 (circular linked list)",
        "Array로 구현된 linked list"
      ],
      "answer": 4,
      "explanation": "포인터만 있는 linked list는 linear search만 가능해서 O(n) 탐색이지만, array는 random access가 가능하므로 O(1) 탐색이 가능합니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"}
      ]
    },
    {
      "question": "Linked list를 사용하여 구현하기 적절하지 않은 것은?",
      "choices": [
        "삽입 정렬 (insertion sort)",
        "기수 정렬 (radix sort)",
        "이진 탐색 (binary search)",
        "위에 언급된 모두 해당"
      ],
      "answer": 3,
      "explanation": "삽입 정렬과 기수 정렬은 random access가 필요없지만 이진 탐색에는 인덱스들을 건너뛰기위해 필요합니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"Insertion sort": "https://en.wikipedia.org/wiki/Insertion_sort"},
        {"Radix sort": "https://en.wikipedia.org/wiki/Radix_sort"},
        {"Binary search": "https://en.wikipedia.org/wiki/Binary_search_algorithm"}
      ]
    },
    {
      "question": "Array와 linked list에 대한 설명으로 틀린 것은?",
      "choices": [
        "Array는 linked list보다 space locality가 좋다.",
        "데이터 삭제는 array보다 linked list가 간단하다.",
        "Linked list에서 random access는 허용되지 않는다.",
        "평균적인 탐색 시간은 array보다 linked list가 짧다."
      ],
      "answer": 4,
      "explanation": "Array에서 데이터는 근접한 메모리 영역에 저장되기 때문에 space locality가 좋습니다. 대신 삭제 시에는 중간이 비게 될 경우 뒤의 데이터들을 앞으로 한 칸씩 옮겨야하므로 linked list보다 비용이 많이 듭니다. 탐색 시간은 random access가 가능한 array가 짧습니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"},
        {"Locality": "https://en.wikipedia.org/wiki/Locality_of_reference"}
      ]
    },
    {
      "question": "다음 중 linked list를 제일 작은 time complexity를 가지고 정렬할 수 있는 것은?",
      "choices": [
        "Insertion sort",
        "Merge sort",
        "Quick sort",
        "Heap sort"
      ],
      "answer": 2,
      "explanation": "우선 quick과 heap은 random access가 요구되므로 linked list에는 적절하지 않습니다. Insertion sort는 linked list에 적용될 수 있으나 최악의 경우에는 시간 복잡도가 O(n^2)가 되므로 O(n log n)인 merge sort와 비교해 덜 선호됩니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"},
        {"Insertion sort": "https://en.wikipedia.org/wiki/Insertion_sort"},
        {"Merge sort": "https://en.wikipedia.org/wiki/Merge_sort"},
        {"Quick sort": "https://en.wikipedia.org/wiki/Quicksort"},
        {"Heap sort": "https://en.wikipedia.org/wiki/Heapsort"}
      ]
    },
    {
      "question": "Singly linked list에서 head 포인터가 주어지지 않았다면, 임의의 노드 A는 ___ 삭제 가능하다.",
      "choices": [
        "첫 번째 노드일 때만",
        "첫 번째 노드가 아닐 때만",
        "마지막 노드일 때만",
        "마지막 노드가 아닐 때만"
      ],
      "answer": 4,
      "explanation": "첫 번째 노드라면 head를 갱신해야하는데 head를 모르기에 갱신할 수 없습니다. 첫 번째 노드가 아니라면 head를 갱신할 필요는 없지만 head를 모르기에 이전 노드를 알아낼 방법이 없어 A 다음의 노드와 스왑해야하는데 이 조건만으로는 다음 노드가 있다는 것을 보장할 수 없습니다. 같은 이유로 마지막 노드였다면 확실하게 불가능하다는 것을 알 수 있습니다. 마지막 노드가 아니라면 A의 다음 노드가 있다는 것을 보장할 수 있으므로 스왑하는 것으로 삭제할 수 있습니다.\n\ntemp = A->next;\nA->data = temp->data;\nA->next = temp->next;\nfree(temp);",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"}
      ]
    },
    {
      "question": "다음 중 array의 단점이 아닌 것은?",
      "choices": [
        "고정된 크기",
        "할당된 크기보다 적게 사용할 때 메모리 낭비가 발생",
        "인덱스 기반 삭제",
        "인덱스를 통한 요소 접근"
      ],
      "answer": 4,
      "explanation": "인덱스를 통한 접근, 즉 임의의 위치에 직접 접근하다는 것은 탐색에 유리합니다. 연속된 공간에 저장된 형태를 유지하기위해 중간에 위치한 값이 삭제될 경우 뒷 쪽의 요소들을 한 칸씩 앞으로 당겨오는 비싼 작업이 필요하게 됩니다.",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"}
      ]
    },
    {
      "question": "같은 길이를 가지는 두 array를 연결하는 작업의 시간 복잡도는?",
      "choices": [
        "O(1)",
        "O(n)",
        "O(log n)",
        "O(n^2)"
      ],
      "answer": 2,
      "explanation": "배열에서 마지막 삽입의 시간 복잡도는 O(1)이나, 하나의 배열에 나머지 배열이 가진 모든 값을 하나씩 옮겨야 하므로 배열의 크기가 시간 복잡도가 됩니다. O(1 * n) = O(n)",
      "references": [
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"}
      ]
    },
    {
      "question": "같은 길이를 가지는 두 linked list를 연결하는 작업의 시간 복잡도는?",
      "choices": [
        "O(1)",
        "O(n)",
        "O(log n)",
        "O(n^2)"
      ],
      "answer": 2,
      "explanation": "한 linked list의 끝에 다른 하나를 연결시켜야 하는데, tail 포인터를 가지고 있지 않는 한 linked list의 끝을 알 수 없기때문에 먼저 끝까지 탐색할 필요가 있습니다. 탐색 시간 복잡도는 O(n)이고 마지막 노드를 알고 난 후는 연결만 해주면 되므로 연결 자체는 O(1) 입니다. 따라서 O(n + 1) = O(n)이 됩니다.",
      "references": [
        {"[한] Linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Linked list": "https://en.wikipedia.org/wiki/Linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"}
      ]
    },
    {
      "question": "이중 연결 리스트 (doubly linked list) 에 대한 설명으로 틀린 것은?",
      "choices": [
        "리스트의 어느 방향으로든 탐색할 수 있다.",
        "단일 연결 리스트보다 많은 공간이 필요하다.",
        "삽입과 삭제가 단일 연결 리스트보다 시간이 더 걸린다.",
        "단일 연결 리스트보다 구현하기 쉽다."
      ],
      "answer": 4,
      "explanation": "단일 연결 리스트보다 삽입과 삭제 시에 재연결해줘야하는 포인터의 수가 많아 구현이 추가적으로 필요하고, 이에 따라 시간도 조금 더 걸립니다.",
      "references": [
        {"[한] Doubly linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8#%EC%9D%B4%EC%A4%91_%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Doubly linked list": "https://en.wikipedia.org/wiki/Linked_list#Doubly_linked_list"}
      ]
    },
    {
      "question": "이중 연결 리스트 (doubly linked list) 에서 삽입의 worst case time complexity는?",
      "choices": [
        "O(log n)",
        "O(n * log n)",
        "O(n)",
        "O(1)"
      ],
      "answer": 3,
      "explanation": "최악의 경우에는 리스트의 마지막까지 이동해야 하므로 단일 연결 리스트와 다를 바 없이 O(n)이 됩니다.",
      "references": [
        {"[한] Doubly linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8#%EC%9D%B4%EC%A4%91_%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Doubly linked list": "https://en.wikipedia.org/wiki/Linked_list#Doubly_linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"}
      ]
    },
    {
      "question": "원형 연결 리스트 (circular linked list) 를 단일 연결 리스트와 비교하여 올바르게 비교한 것은?",
      "choices": [
        "Head가 null을 가리키는 경우는 없다.",
        "탐색 속도가 더 빠르다.",
        "다음 노드를 가리키는 포인터가 null을 가리키는 경우는 없다.",
        "마지막 노드가 무엇인지 알 수 없다."
      ],
      "answer": 3,
      "explanation": "빈 리스트면 head가 null을 가리킬 수도 있습니다. Tail이 없을 뿐 연결 구조가 바뀌는 것은 아니기 때문에 탐색 속도가 더 빠르지는 않습니다.\n다음 노드를 가리키는 포인터가 head 포인터와 동일하면 마지막 노드라고 알 수 있습니다.",
      "references": [
        {"[한] Circular linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8#%EC%9B%90%ED%98%95_%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Circulr linked list": "https://en.wikipedia.org/wiki/Linked_list#Circular_linked_list"}
      ]
    },
    {
      "question": "Circular linked list을 적용하기 적절한 곳은?",
      "choices": [
        "실행 취소 동작",
        "CPU 스케줄링",
        "재귀 함수 호출",
        "Hash table 구현"
      ],
      "answer": 2,
      "explanation": "CPU 스케줄링 중 모든 프로세스에 균등하고 자원을 반복해서 분배하는 round-robin에 적용될 수 있습니다. 실행 취소 동작이나 재귀 함수 호출은 stack을 사용합니다.",
      "references": [
        {"[한] Circular linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8#%EC%9B%90%ED%98%95_%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Circulr linked list": "https://en.wikipedia.org/wiki/Linked_list#Circular_linked_list"}
      ]
    },
    {
      "question": "Circular linked list에 대한 설명으로 틀린 것은?",
      "choices": [
        "Head에 노드를 추가하는 시간 복잡도는 O(1)이다.",
        "모든 노드는 다음 노드를 가리키고 있다.",
        "마지막 노드를 삭제하는 시간 복잡도는 O(n)이다.",
        "이중 연결 리스트보다 공간을 적게 사용한다."
      ],
      "answer": 1,
      "explanation": "Circular linked list에서는 마지막 노드가 첫 노드를 가리키고 있어야 하므로 head에 추가되어야 할 경우 마지막 노드를 찾아야 해서 시간 복잡도가 O(n)이 됩니다.",
      "references": [
        {"[한] Circular linked list": "https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8#%EC%9B%90%ED%98%95_%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8"},
        {"Circulr linked list": "https://en.wikipedia.org/wiki/Linked_list#Circular_linked_list"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"}
      ]
    }
  ]
}
