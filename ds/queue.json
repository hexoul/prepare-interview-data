{
  "questions": [
    {
      "question": "Stack은 ___로 동작한다.",
      "choices": [
        "FIFO",
        "FILO",
        "LILO",
        "FCFS"
      ],
      "answer": 2,
      "explanation": "First In Last Out (FILO), 즉 처음 들어온 것이 마지막으로 나가는 것을 의미합니다. Last In First Out (LIFO) 라고도 합니다.\n나머지 First In First Out (FIFO), Last In Last Out (LILO), First Come First Served (FCFS) 는 동의어로 Queue의 동작 방식입니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"FIFO": "https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)"}
      ]
    },
    {
      "question": "요소 (element) 를 Stack에 넣는 동작을 ___라 한다.",
      "choices": [
        "Put",
        "Create",
        "Assign",
        "Push"
      ],
      "answer": 4,
      "explanation": "Put, create 및 assign은 stack의 요소를 넣고 뺄 때 일반적으로 사용되지 않는 용어입니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "요소 (element) 를 Stack에서 제거하는 동작을 ___라 한다.",
      "choices": [
        "Put",
        "Peak",
        "Pop",
        "Push"
      ],
      "answer": 3,
      "explanation": "Peak는 제거는 하지 않고 제공될 순서의 요소를 반환만 하는 함수입니다. Stack에서는 마지막으로 삽입됐었던 요소입니다. 참고로 Queue라면 삽입된지 제일 오래된 요소가 됩니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Stack이 비어있을 때 pop을 하면 ___가 발생한다.",
      "choices": [
        "IndexOutOfBounds",
        "Memory access violation",
        "Underflow",
        "Overflow"
      ],
      "answer": 3,
      "explanation": "객체를 통해 추상화된 함수를 통한 접근이기 때문에, 메모리 접근 위치를 직접 입력하는 것이 아니라 1번과 2번 모두 발생할 수 없습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Stack이 꽉 차있을 때 push를 하면 ___가 발생한다.",
      "choices": [
        "IndexOutOfBounds",
        "Memory access violation",
        "Underflow",
        "Overflow"
      ],
      "answer": 4,
      "explanation": "객체를 통해 추상화된 함수를 통한 접근이기 때문에, 메모리 접근 위치를 직접 입력하는 것이 아니라 1번과 2번 모두 발생할 수 없습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "다음 중 stack이 적용될 수 있는 application이 아닌 것은?",
      "choices": [
        "Balanced parentheses",
        "지역 변수 저장",
        "Syntax analyzer",
        "Inter-process Communication (IPC)"
      ],
      "answer": 4,
      "explanation": "데이터 전달에서는 먼저 보낸 것을 먼저 받아야 하므로 IPC에 stack은 적당하지 않습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"Balanced parentheses": "https://runestone.academy/runestone/books/published/pythonds/BasicDS/SimpleBalancedParentheses.html"},
        {"Stack for local variable": "http://www.it.uc3m.es/pbasanta/asng/course_notes/dynamic_memory_stack_en.html"},
        {"Stack for syntax anlayzer": "https://en.wikipedia.org/wiki/LR_parser#Bottom-up_parse_stack"},
        {"IPC": "https://en.wikipedia.org/wiki/Inter-process_communication"}
      ]
    },
    {
      "question": "Balanced parentheses 확인에 stack을 쓸 때, 입력이 '(()(())(()))' 라면 stack의 크기는 최대 몇까지 자라나는가?",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 3,
      "explanation": "Balanced parentheses는 열고 닫는 괄호의 순서와 갯수가 알맞게 쓰여져있는지 확인하는 걸 말합니다. 이에 열린 괄호일 때는 stack에 push하고 닫힌 괄호일 때는 peak가 열린 괄호인지 확인하고 pop합니다. 최종적으로 stack의 크기가 0이라면 balanced parentheses라는 것을 알 수 있습니다.\n문제에서는 3번째 문자에서 stack의 크기가 1이 되었다가 5번째에서 3이 되고, 7번째 문자에서 다시 1이 되었다가 9번째 문자에서 한번 더 3에 도달합니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"Balanced parentheses": "https://runestone.academy/runestone/books/published/pythonds/BasicDS/SimpleBalancedParentheses.html"}
      ]
    },
    {
      "question": "후위 표기법 (postfix notation) 으로 쓰인 '2 5 3 + 4 * -'의 계산 값은?",
      "choices": [
        "17",
        "-3",
        "-30",
        "-33"
      ],
      "answer": 3,
      "explanation": "2 - ((5+3) * 4) = -30",
      "references": [
        {"[한] Postfix notation": "https://ko.wikipedia.org/wiki/%EC%97%AD%ED%8F%B4%EB%9E%80%EB%93%9C_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Postfix notation": "https://en.wikipedia.org/wiki/Reverse_Polish_notation"}
      ]
    },
    {
      "question": "중위 표기법 (infix notation) 으로 쓰인 '9 + 1 * (6 / 2 - 6)'를 후위 표기법으로 변환할 때 stack은 최대 몇까지 증가하는가?",
      "choices": [
        "3",
        "4",
        "5",
        "6"
      ],
      "answer": 2,
      "explanation": "변환 시 stack은 피연산자를 제외한 연산자와 괄호를 담기위한 용도로 사용됩니다. Peak의 연산자보다 우선순위가 높을 경우 계속 stack에 쌓이게 되므로 '/'까지 계속 push되어 크기가 4까지 증가했다가 '-'를 넣지않고 pop하여 줄어들기 시작합니다.",
      "references": [
        {"[한] Postfix notation": "https://ko.wikipedia.org/wiki/%EC%97%AD%ED%8F%B4%EB%9E%80%EB%93%9C_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Postfix notation": "https://en.wikipedia.org/wiki/Reverse_Polish_notation"},
        {"Infix to postfix conversion": "https://en.wikipedia.org/wiki/Reverse_Polish_notation#Converting_from_infix_notation"}
      ]
    },
    {
      "question": "Stack의 pop 시간 복잡도는?",
      "choices": [
        "O(1)",
        "O(n)",
        "O(log n)",
        "O(n log n)"
      ],
      "answer": 1,
      "explanation": "탐색없이 바로 접근할 수 있도록 관리되므로 constant time, 즉 O(1)입니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"},
        {"점근 표기법": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "Array로 구현된 Stack에 대한 설명으로 올바르지 않은 것은?",
      "choices": [
        "Stack의 capacity는 런타임에 변하지 않는다.",
        "컴파일 타임에 capacity가 결정된다.",
        "Dynamic stack에 비해 push/pop이 빠르다.",
        "Overflow가 발생하지 않는다."
      ],
      "answer": 4,
      "explanation": "Capacity, 즉 stack의 용량이 변하는 런타임에 동적으로 변할 수 있는 dynamic stack과 달리 컴파일 때부터 capacity가 결정되어 변하지 않습니다. 동적으로 메모리를 할당받을 필요가 없고 구조가 더 단순하므로 push/pop 오버헤드가 더 작습니다. 또한 크기가 고정되어 있기 때문에 overflow가 발생할 확률이 더 높습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"[한] Array": "https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4"},
        {"Array": "https://en.wikipedia.org/wiki/Array_data_structure"}
      ]
    },
    {
      "question": "Singly linked list (SLL) 을 역정렬시키는데 stack을 사용한다면 시간 복잡도는 ___이다.",
      "choices": [
        "O(1)",
        "O(log n)",
        "O(n)",
        "O(n^2)"
      ],
      "answer": 3,
      "explanation": "SLL의 모든 요소를 stack에 push한 뒤에 pop하면 역정렬이 됩니다. push와 pop은 모두 constant time의 시간 복잡도를 가지므로 길이만 고려하면 되어, O(2 * n) = O(n)이 됩니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"[한] Time complexity": "https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84"},
        {"Time complexity": "https://en.wikipedia.org/wiki/Time_complexity"},
        {"점근 표기법": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "괄호와 사칙연산이 가능한 중위 표기법 (infix notation) 계산기를 stack으로 구현할 때 필요한 stack의 갯수는?",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 1,
      "explanation": "Infix evaluation (중위 표기법 계산) 은 일반적으로 postfix로 변환 후 postfix evaluation이 행해집니다. 이 때, 변환 시에 연산자를 담기 위해 stack이 한 개 쓰이고 postfix evaluation 시에는 피연산자를 담기 위해 stack이 한 개 쓰입니다. 다만 stack이 두 군데에서 사용되지만 동시에 진행되는 작업이 아니므로 결국 한 개만 있으면 됩니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"[한] Postfix notation": "https://ko.wikipedia.org/wiki/%EC%97%AD%ED%8F%B4%EB%9E%80%EB%93%9C_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Postfix notation": "https://en.wikipedia.org/wiki/Reverse_Polish_notation"},
        {"Infix to postfix conversion": "https://en.wikipedia.org/wiki/Reverse_Polish_notation#Converting_from_infix_notation"}
      ]
    },
    {
      "question": "꽉 차있는 Queue에 삽입 시도 시 발생하는 것은?",
      "choices": [
        "Underflow",
        "Overflow",
        "Null pointer exception (NPE)",
        "Segmentation fault"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"}
      ]
    },
    {
      "question": "Enqueue의 시간 복잡도는?",
      "choices": [
        "O(n log n)",
        "O(log n)",
        "O(n)",
        "O(1)"
      ],
      "answer": 4,
      "explanation": "Enqueue는 queue에 새로운 요소를 넣는 동작입니다. Queue는 다음에 삽입되어야 할 위치를 관리하고 있으므로 탐색할 필요는 없어 constant time만 필요합니다.",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"}
      ]
    },
    {
      "question": "Circular queue를 array로 구현할 때 삽입 시 마지막 (rear) 인덱스를 어떻게 갱신시키는가?",
      "choices": [
        "rear + 1",
        "rear - 1",
        "(rear + 1) % CAPACITY",
        "rear % CAPACITY + 1"
      ],
      "answer": 3,
      "explanation": "삽입이므로 인덱스를 증가시켜야해서 1을 우선 더합니다. 더해서 array의 크기 (capacity) 를 넘어섰다면 인덱스 0부터 다시 증가되도록 해야하므로 모듈러 연산을 추가적으로 해줍니다.",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"},
        {"[한] Circular buffer": "https://ko.wikipedia.org/wiki/%EC%9B%90%ED%98%95_%EB%B2%84%ED%8D%BC"},
        {"Circular buffer": "https://en.wikipedia.org/wiki/Circular_buffer"}
      ]
    },
    {
      "question": "Circular queue는 ___하기 위해 사용된다.",
      "choices": [
        "비교적 쉽게 구현",
        "메모리를 효율적으로 사용",
        "삭제를 빠르게 처리",
        "탐색을 빠르게"
      ],
      "answer": 2,
      "explanation": "원시적인 구조에서는 요소마다 메모리의 할당과 해제가 발생합니다. 이를 극복하고자 circular queue는 array를 이용하여 capacity 이내라면 최초에 할당받았던 공간을 재활용할 수 있도록 설계되었습니다.",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"},
        {"[한] Circular buffer": "https://ko.wikipedia.org/wiki/%EC%9B%90%ED%98%95_%EB%B2%84%ED%8D%BC"},
        {"Circular buffer": "https://en.wikipedia.org/wiki/Circular_buffer"}
      ]
    },
    {
      "question": "입력을 모두 받은 후 입력받았던 순서대로 출력하는 프로그램의 공간 복잡도는?",
      "choices": [
        "O(1)",
        "O(log n)",
        "O(n)",
        "O(n^2)"
      ],
      "answer": 3,
      "explanation": "Queue를 이용하면 되며 입력을 모두 받은 후 출력해야 하므로 한 번 입력 길이만큼 저장할 필요가 있습니다. 따라서 O(n)이 됩니다.",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"},
        {"Space complexity": "https://en.wikipedia.org/wiki/Space_complexity"}
      ]
    },
    {
      "question": "Priority queue는 효율을 위해 일반적으로 ___를 사용하여 구현된다.",
      "choices": [
        "Array",
        "List",
        "Heap",
        "Graph"
      ],
      "answer": 3,
      "explanation": "Priority가 높은 값이 먼저 반환되어야 하는 priority queue의 정의 상 최댓값 또는 최솟값을 빠르게 구하기위해 고안된 heap이 유용합니다.",
      "references": [
        {"[한] Priority queue": "https://ko.wikipedia.org/wiki/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84_%ED%81%90"},
        {"Priority queue": "https://en.wikipedia.org/wiki/Priority_queue"},
        {"[한] Heap": "https://ko.wikipedia.org/wiki/%ED%9E%99_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Heap": "https://en.wikipedia.org/wiki/Heap_(data_structure)"}
      ]
    },
    {
      "question": "Priority queue를 사용하기 적절하지 않은 곳은?",
      "choices": [
        "Interrupt handling",
        "Undo operation",
        "Huffman coding",
        "Dijkstra's algorithm"
      ],
      "answer": 2,
      "explanation": "Undo는 stack을 이용하여 구현하는 것이 적절합니다.\n- Interrupt handling: interrupt 간에 우선순위가 있어 높은 우선순위부터 처리되어야 합니다.\n- Huffman coding: 출현 빈도수에 따라 표기가 정해지므로 출현 빈도수를 우선순위로 보고 priority queue가 쓰일 수 있습니다.\n- Dijkstra's algorithm: 최단 거리를 구하기 위해 가중치가 낮은 경로를 선택할 때 쓰일 수 있습니다.",
      "references": [
        {"[한] Priority queue": "https://ko.wikipedia.org/wiki/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84_%ED%81%90"},
        {"Priority queue": "https://en.wikipedia.org/wiki/Priority_queue"},
        {"Interrupt priority level": "https://en.wikipedia.org/wiki/Interrupt_priority_level"},
        {"Huffman coding": "https://en.wikipedia.org/wiki/Huffman_coding"},
        {"Dijkstra's algorithm": "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"}
      ]
    },
    {
      "question": "Double-ended queue (deque) 란?",
      "choices": [
        "front와 rear 모두에서 삽입과 삭제가 가능한 queue",
        "Doubly linked list로 구현된 queue",
        "삽입은 front에서 이루어지고 rear가 둘로 나뉘어진 queue",
        "직렬로 연결된 두 개의 queue"
      ],
      "answer": 1,
      "explanation": "Dequeue라고 불리기도 하지만 일반적으로 deque로 쓰입니다. Dequeue는 queue에서 제거하는 작업을 뜻하기도 하기 때문입니다. 참고로 queue에 추가하는 작업은 enqueue라 합니다.",
      "references": [
        {"[한] Deque": "https://ko.wikipedia.org/wiki/%EB%8D%B1_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Deque": "https://en.wikipedia.org/wiki/Double-ended_queue"},
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"}
      ]
    },
    {
      "question": "Double-ended queue (deque) 에 대한 설명으로 틀린 것은?",
      "choices": [
        "front로만 push와 pop을 하면 stack이 된다.",
        "rear로만 push와 pop을 하면 queue가 된다.",
        "front로는 push만 하고 rear로는 pop만 하면 queue가 된다.",
        "rear로는 push만 하고 front로는 pop만 하면 queue가 된다."
      ],
      "answer": 2,
      "explanation": "front 또는 rear 상관없이 한 쪽에서만 push와 pop을 하면 LIFO인 stack으로 동작하게 됩니다.",
      "references": [
        {"[한] Deque": "https://ko.wikipedia.org/wiki/%EB%8D%B1_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Deque": "https://en.wikipedia.org/wiki/Double-ended_queue"},
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Double-ended queue (deque) 를 stack으로만 구현한다면 몇 개가 필요한가?",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 2,
      "explanation": "우선 front 또는 rear (back) 중 한 방향을 위해 stack이 한 개 필요합니다. push_front와 pop_front를 위해 stack A가 쓰였다고 하면 구현해야하는 남은 오퍼레이션은 push_back과 pop_back입니다.\npush_back을 위해서는 기존 stack A에 들어있는 요소를 모두 뺀 뒤 마지막에 추가해야 합니다. 그 뒤 기존에 들어있었던 요소들의 순서를 유지하도록, 뺐었던 순서의 반대로 기존 stack A에 다시 넣어주면 됩니다. 따라서 임시 저장소로 stack B를 사용하면 구현 가능합니다. 비슷하게 pop_back은 stack A에 N개가 들어있었다면 N개를 전부 stack B로 pop한 뒤 마지막 요소는 버리고 나머지 N-1개를 다시 stack A로 push하면 pop_back이 구현됩니다.",
      "references": [
        {"[한] Deque": "https://ko.wikipedia.org/wiki/%EB%8D%B1_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Deque": "https://en.wikipedia.org/wiki/Double-ended_queue"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Double-ended queue (deque) 를 stack으로만 구현했을 때 stack의 길이가 모두 N이라면 push_front + push_back의 시간 복잡도는 어떻게 되는가?",
      "choices": [
        "O(1)",
        "O(log n)",
        "O(n)",
        "O(n^2)"
      ],
      "answer": 3,
      "explanation": "우선 front 또는 rear (back) 중 한 방향을 위해 stack이 한 개 필요합니다. push_front와 pop_front를 위해 stack A가 쓰였다고 하면 구현해야하는 남은 오퍼레이션은 push_back과 pop_back입니다.\npush_back을 위해서는 기존 stack A에 들어있는 요소를 모두 뺀 뒤 마지막에 추가해야 합니다. 그 뒤 기존에 들어있었던 요소들의 순서를 유지하도록, 뺐었던 순서의 반대로 기존 stack A에 다시 넣어주면 됩니다. 따라서 임시 저장소로 stack B를 사용하면 구현 가능합니다. 비슷하게 pop_back은 stack A에 N개가 들어있었다면 N개를 전부 stack B로 pop한 뒤 마지막 요소는 버리고 나머지 N-1개를 다시 stack A로 push하면 pop_back이 구현됩니다.\n\n위와 같은 상황이라면 push_front와 push_back 둘 중 하나는 constant time, 즉 O(1)이고 나머지 하나는 요소를 전부 뺐다가 넣어야 하므로 O(2n)이 됩니다. 따라서 정답은 O(1 + 2n) = O(n)입니다.",
      "references": [
        {"[한] Deque": "https://ko.wikipedia.org/wiki/%EB%8D%B1_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Deque": "https://en.wikipedia.org/wiki/Double-ended_queue"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Stack을 queue로만 구현한다면 몇 개가 필요한가?",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 2,
      "explanation": "push와 enqueue는 동일하게 동작하므로 pop만 구현하면 됩니다. Stack의 pop은 마지막으로 삽입된 요소의 제거인데 queue에서 마지막 요소를 얻기 위해서는 앞선 요소들을 임시로 전부 제외시켜야 합니다. 따라서 queue A의 N개 요소 중 N개를 전부 dequeue 한 뒤 앞선 N-1개만 임시 queue B에 enqueue하였다가 dequeue하여 queue A에 다시 넣으면 pop이 됩니다.",
      "references": [
        {"[한] Queue": "https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)"},
        {"Queue": "https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "문자열 반전을 stack으로만 구현하려면 stack이 ___개 필요하다.",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 1,
      "explanation": "같은 stack에 문자열의 길이만큼 push를 한 후 pop을 해야하므로 한 개만 필요합니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "문자열 반전을 stack으로 구현하면 시간 복잡도는 ___이다.",
      "choices": [
        "O(1)",
        "O(log n)",
        "O(n log n)",
        "O(n)"
      ],
      "answer": 4,
      "explanation": "문자열의 길이만큼 push를 한 후 pop을 해야하므로 O(2n) = O(n)이 됩니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    }
  ]
}
