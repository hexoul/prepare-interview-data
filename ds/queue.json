{
  "questions": [
    {
      "question": "Stack은 ___로 동작한다.",
      "choices": [
        "FIFO",
        "FILO",
        "LILO",
        "FCFS"
      ],
      "answer": 2,
      "explanation": "First In Last Out (FILO), 즉 처음 들어온 것이 마지막으로 나가는 것을 의미합니다. Last In First Out (LIFO) 라고도 합니다.\n나머지 First In First Out (FIFO), Last In Last Out (LILO), First Come First Served (FCFS) 는 동의어로 Queue의 동작 방식입니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"FIFO": "https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)"}
      ]
    },
    {
      "question": "요소 (element) 를 Stack에 넣는 동작을 ___라 한다.",
      "choices": [
        "Put",
        "Create",
        "Assign",
        "Push"
      ],
      "answer": 4,
      "explanation": "Put, create 및 assign은 stack의 요소를 넣고 뺄 때 일반적으로 사용되지 않는 용어입니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "요소 (element) 를 Stack에서 제거하는 동작을 ___라 한다.",
      "choices": [
        "Put",
        "Peak",
        "Pop",
        "Push"
      ],
      "answer": 3,
      "explanation": "Peak는 제거는 하지 않고 제공될 순서의 요소를 반환만 하는 함수입니다. Stack에서는 마지막으로 삽입됐었던 요소입니다. 참고로 Queue라면 삽입된지 제일 오래된 요소가 됩니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Stack이 비어있을 때 pop을 하면 ___가 발생한다.",
      "choices": [
        "IndexOutOfBounds",
        "Memory access violation",
        "Underflow",
        "Overflow"
      ],
      "answer": 3,
      "explanation": "객체를 통해 추상화된 함수를 통한 접근이기 때문에, 메모리 접근 위치를 직접 입력하는 것이 아니라 1번과 2번 모두 발생할 수 없습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "Stack이 꽉 차있을 때 push를 하면 ___가 발생한다.",
      "choices": [
        "IndexOutOfBounds",
        "Memory access violation",
        "Underflow",
        "Overflow"
      ],
      "answer": 4,
      "explanation": "객체를 통해 추상화된 함수를 통한 접근이기 때문에, 메모리 접근 위치를 직접 입력하는 것이 아니라 1번과 2번 모두 발생할 수 없습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "다음 중 stack이 적용될 수 있는 application이 아닌 것은?",
      "choices": [
        "Balanced parentheses",
        "지역 변수 저장",
        "Syntax analyzer",
        "Inter-process Communication (IPC)"
      ],
      "answer": 4,
      "explanation": "데이터 전달에서는 먼저 보낸 것을 먼저 받아야 하므로 IPC에 stack은 적당하지 않습니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"Balanced parentheses": "https://runestone.academy/runestone/books/published/pythonds/BasicDS/SimpleBalancedParentheses.html"},
        {"Stack for local variable": "http://www.it.uc3m.es/pbasanta/asng/course_notes/dynamic_memory_stack_en.html"},
        {"Stack for syntax anlayzer": "https://en.wikipedia.org/wiki/LR_parser#Bottom-up_parse_stack"},
        {"IPC": "https://en.wikipedia.org/wiki/Inter-process_communication"}
      ]
    },
    {
      "question": "Balanced parentheses 확인에 stack을 쓸 때, 입력이 '(()(())(()))' 라면 stack의 크기는 최대 몇까지 자라나는가?",
      "choices": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": 3,
      "explanation": "Balanced parentheses는 열고 닫는 괄호의 순서와 갯수가 알맞게 쓰여져있는지 확인하는 걸 말합니다. 이에 열린 괄호일 때는 stack에 push하고 닫힌 괄호일 때는 peak가 열린 괄호인지 확인하고 pop합니다. 최종적으로 stack의 크기가 0이라면 balanced parentheses라는 것을 알 수 있습니다.\n문제에서는 3번째 문자에서 stack의 크기가 1이 되었다가 5번째에서 3이 되고, 7번째 문자에서 다시 1이 되었다가 9번째 문자에서 한번 더 3에 도달합니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"},
        {"Balanced parentheses": "https://runestone.academy/runestone/books/published/pythonds/BasicDS/SimpleBalancedParentheses.html"}
      ]
    },
    {
      "question": "후위 표기법 (postfix notation) 으로 쓰인 '2 5 3 + 4 * -'의 계산 값은?",
      "choices": [
        "17",
        "-3",
        "-30",
        "-33"
      ],
      "answer": 3,
      "explanation": "2 - ((5+3) * 4) = -30",
      "references": [
        {"[한] Postfix notation": "https://ko.wikipedia.org/wiki/%EC%97%AD%ED%8F%B4%EB%9E%80%EB%93%9C_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Postfix notation": "https://en.wikipedia.org/wiki/Reverse_Polish_notation"}
      ]
    },
    {
      "question": "중위 표기법 (infix notation) 으로 쓰인 '9 + 1 * (6 / 2 - 6)'를 후위 표기법으로 변환할 때 stack은 최대 몇까지 증가하는가?",
      "choices": [
        "3",
        "4",
        "5",
        "6"
      ],
      "answer": 2,
      "explanation": "변환 시 stack은 피연산자를 제외한 연산자와 괄호를 담기위한 용도로 사용됩니다. Peak의 연산자보다 우선순위가 높을 경우 계속 stack에 쌓이게 되므로 '/'까지 계속 push되어 크기가 4까지 증가했다가 '-'를 넣지않고 pop하여 줄어들기 시작합니다.",
      "references": [
        {"[한] Postfix notation": "https://ko.wikipedia.org/wiki/%EC%97%AD%ED%8F%B4%EB%9E%80%EB%93%9C_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Postfix notation": "https://en.wikipedia.org/wiki/Reverse_Polish_notation"},
        {"Infix to postfix conversion": "https://en.wikipedia.org/wiki/Reverse_Polish_notation#Converting_from_infix_notation"}
      ]
    }
  ]
}
