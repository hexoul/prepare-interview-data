{
  "questions": [
    {
      "question": "전제 조건 (precondition) 에 대한 설명으로 틀린 것은?",
      "choices": [
        "코드의 특정 구간이 실행되기 전에 반드시 true여야 하는 조건이다.",
        "Assertion이 쓰이기도 한다.",
        "한번 코드로 작성되면 수정되는 일은 거의 없다.",
        "정의되지않는 경우도 있다."
      ],
      "answer": 3,
      "explanation": "전제 조건을 검사하는 부분도 프로그래머에 의해 개발되는 부분이므로 잘못 작성되는 경우도 많습니다. 정의보다 느슨한 기준으로 구현되면 에러가 발생하거나 보장안된 결과가 도출될 수 있고, 정의보다 엄격한 조건으로 구현되면 assertion에 의해 의도치않게 프로그램이 정지되거나 결과를 얻지 못할 수도 있습니다.\n입력이 필요없는 stateless한 동작은 정의되지않기도 합니다. 예) 상수를 stdout에 출력",
      "references": [
        {"Precondition": "https://en.wikipedia.org/wiki/Precondition"},
        {"Assertion": "https://en.wikipedia.org/wiki/Assertion_(software_development)"}
      ]
    },
    {
      "question": "사후 조건 (postcondition)에 대한 설명으로 맞는 것은?",
      "choices": [
        "Precondition이 만족되지 않았어도 postcondition은 만족될 수 있다.",
        "프로그램 실행 중에 변경될 수 있다.",
        "Postcondition이 만족되지 않아도 프로그램이 특별히 하는 것은 없다.",
        "코드의 특정 구간이 실행된 후에 반드시 true여야 하는 조건이다."
      ],
      "answer": 4,
      "explanation": "Precondition이 만족되지 않았다면 코드를 수행하지 못했을 것이므로, postcondition이 확인될 일은 없습니다.\n프로그램 개발 전에 요구사항 분석 시점에 정해지는 조건으로 프로그램 실행 중에는 변경될 수 없습니다. 원칙적으로는 postcondition이 만족하지않는 경우는 발생하지 않도록 테스트를 충분히 하여야 하나, 만약 발생했을 경우에는 재시도를 하거나 에러 등 반드시 처리를 해주어야 합니다.",
      "references": [
        {"Precondition": "https://en.wikipedia.org/wiki/Precondition"},
        {"Postcondition": "https://en.wikipedia.org/wiki/Postcondition"}
      ]
    },
    {
      "question": "Abstract Data Type (ADT)에 대한 설명으로 틀린 것은?",
      "choices": [
        "주로 자료구조 (data structure) 라고 불린다.",
        "C 또는 Java 등 특정 프로그래밍 언어에 연관되지 않는다.",
        "데이터와 데이터를 조작하는 함수 등으로 이루어진다.",
        "은닉화 (Encapsulation) 을 제공한다는 장점이 있다."
      ],
      "answer": 1,
      "explanation": "ADT는 프로그래밍 언어와는 상관없이 데이터와 데이터를 조작하는 함수들을 포함하는 수학적 모델입니다. 일반적으로 ADT 인스턴스 별로 데이터와 상태 (state) 를 가진다고도 볼 수 있습니다.\nADT는 자료구조와는 다릅니다. 자료구조가 사용자 입장에서의 정의라면 ADT는 자료구조를 구현자 관점에서 실현시키기위한 모델로, 자료와 조작을 위한 함수를 갖는다는 점은 공통적이지만 목적이 다릅니다.",
      "references": [
        {"ADT": "https://en.wikipedia.org/wiki/Abstract_data_type"},
        {"Data structure": "https://en.wikipedia.org/wiki/Data_structure"},
        {"Encapsulation": "https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)"}
      ]
    },
    {
      "question": "다음 Big O 표기법 중 가장 작은 값을 나타내는 것은?",
      "choices": [
        "O(n)",
        "O(n / 100)",
        "O(2n)",
        "O(log n)"
      ],
      "answer": 4,
      "explanation": "Big O 표기법에서 계수 (coefficient) 나 상수는 그 정의에 따라 1로 수렴됩니다. 따라서 O(n / 100)도 O(2n)도 모두 O(n)가 됩니다.\n로그함수는 일차함수보다 발산하는 정도가 약하므로 O(log n) < O(n)입니다.",
      "references": [
        {"점근 표기법": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "다음 Big O 표기법 간의 비교로 틀린 것은?",
      "choices": [
        "O(n) = O(n + 50)",
        "O(n) = O(10n + 100)",
        "O(n) = O(n^2)",
        "O(n) = O(n + log n)"
      ],
      "answer": 3,
      "explanation": "Big O 표기법에서 계수 (coefficient) 나 상수는 그 정의에 따라 1로 수렴됩니다. 또한 상한 점근이기 때문에 최고차수에 대한 표현만 남고 나머지는 무시됩니다. 따라서 O(n + log n)도 O(n)이 됩니다. O(n^2 + n)의 경우에도 O(n^2)이 됩니다.",
      "references": [
        {"점근 표기법": "https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95"},
        {"Big O notation": "https://en.wikipedia.org/wiki/Big_O_notation"}
      ]
    },
    {
      "question": "문자열을 반전시키기에 적절한 자료구조는?",
      "choices": [
        "Stack",
        "Queue",
        "Tree",
        "Graph"
      ],
      "answer": 1,
      "explanation": "문자열 반전을 위해서는 마지막이 처음으로 올 필요가 있으므로 stack의 특성은 LIFO가 적절합니다.",
      "references": [
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "회문 (palindrome) 을 찾기 적절한 자료구조는?",
      "choices": [
        "Stack",
        "Queue",
        "Tree",
        "Graph"
      ],
      "answer": 1,
      "explanation": "회문 (palindrome) 이란 낱말이나 문장이 그대로 읽든 거꾸로 읽든 같은 것을 말합니다. 예를 들어 'madam', 'refer' 등이 있습니다. 따라서 회문 판멸을 위해서는 문자열을 반전시킬 필요가 있으므로 보기 중에서는 stack이 적절합니다. 문자열을 새롭게 구성안해도 비교만 하면 되므로 역으로 탐색이 가능한 array나 list가 쓰일 수도 있습니다.",
      "references": [
        {"[한] Palindrome": "https://ko.wikipedia.org/wiki/%ED%9A%8C%EB%AC%B8"},
        {"Palindrome": "https://en.wikipedia.org/wiki/Palindrome"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    },
    {
      "question": "하노이의 탑 (tower of Hanoi) 을 풀기 위해 적절한 자료구조는?",
      "choices": [
        "Stack",
        "Queue",
        "Tree",
        "Graph"
      ],
      "answer": 1,
      "explanation": "기둥에 꽂혀있는 원판은 제일 위에 위치한 것만 옮길 수 있으므로 stack이 적절합니다.",
      "references": [
        {"[한] Tower of Hanoi": "https://ko.wikipedia.org/wiki/%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98_%ED%83%91"},
        {"Tower of Hanoi": "https://en.wikipedia.org/wiki/Tower_of_Hanoi"},
        {"[한] Stack": "https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D"},
        {"Stack": "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"}
      ]
    }
  ]
}
