{"version":3,"sources":["ColorModeSwitcher.js","logo.svg","Logo.js","components/Main.js","components/Subject.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","spin","keyframes","Logo","animation","usePrefersReducedMotion","undefined","src","logo","Main","useState","contents","setContents","useEffect","a","axios","result","data","fetch","h","pointerEvents","filter","i","link","map","content","Subject","this","match","params","id","href","target","rel","Component","App","theme","textAlign","minH","p","justifySelf","spacing","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iRAIaA,EAAoB,SAAAC,GAAU,IACjCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,K,kECnBK,MAA0B,iCCInCgB,EAAOC,YAAH,sGAKGC,EAAO,SAAAlB,GAClB,IAEMmB,EAFuBC,mBAGzBC,EADkC,UAE/BL,EAF+B,wBAItC,OAAO,cAAC,IAAD,aAAOG,UAAWA,EAAWG,IAAKC,GAAUvB,K,iBCZ9C,SAASwB,IAAS,IAAD,EACUC,mBAAS,IADnB,mBACfC,EADe,KACLC,EADK,KAatB,OAVAC,qBAAU,YACG,uCAAG,4BAAAC,EAAA,sEACSC,IACnB,wFAFU,OACNC,EADM,OAIZJ,EAAYI,EAAOC,MAJP,2CAAH,qDAMXC,KACC,IAGD,gCACE,cAAC,EAAD,CAAMC,EAAE,SAASC,cAAc,SAC/B,6BACGT,EAASU,QAAO,SAAAC,GAAC,OAAIA,EAAEC,QAAMC,KAAI,SAAAF,GAAC,OACjC,6BAAqBA,EAAEG,SAAdH,EAAEG,iB,6CCnBRC,EAAb,4JACE,WACE,OACE,gCACE,6BAAKC,KAAK1C,MAAM2C,MAAMC,OAAOC,KAC7B,cAAC,IAAD,CACEjC,MAAM,WACNkC,KAAK,wBACLrC,SAAS,MACTsC,OAAO,SACPC,IAAI,sBALN,iCALR,GAA6BC,aC8BdC,MApBf,WACE,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,IAAD,CAAKC,UAAU,SAAS3C,SAAS,KAAjC,SACE,eAAC,IAAD,CAAM4C,KAAK,QAAQC,EAAG,EAAtB,UACE,cAAC,EAAD,CAAmBC,YAAY,aAC/B,cAAC,IAAD,CAAQC,QAAS,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,cAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,OAAOC,UAAWlB,mBCXrCmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7B,MACvB,2DCXN8B,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YClH5BzB,M","file":"static/js/main.b6ecc12a.chunk.js","sourcesContent":["import React from 'react'\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size='md'\n      fontSize='lg'\n      aria-label={`Switch to ${text} mode`}\n      variant='ghost'\n      color='current'\n      marginLeft='2'\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import React from 'react'\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react'\nimport logo from './logo.svg'\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion()\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`\n\n  return <Image animation={animation} src={logo} {...props} />\n}\n","import React, { useEffect, useState } from 'react'\nimport { Logo } from '../Logo'\nimport axios from 'axios'\n\nexport function Main () {\n  const [contents, setContents] = useState([])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const result = await axios(\n        'https://raw.githubusercontent.com/hexoul/prepare-interview-data/master/contents.json'\n      )\n      setContents(result.data)\n    }\n    fetch()\n  }, [])\n\n  return (\n    <div>\n      <Logo h='40vmin' pointerEvents='none' />\n      <ul>\n        {contents.filter(i => i.link).map(i => (\n          <li key={i.content}>{i.content}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { Link } from '@chakra-ui/react'\n\nexport class Subject extends Component {\n  render () {\n    return (\n      <div>\n        <h2>{this.props.match.params.id}</h2>\n        <Link\n          color='teal.500'\n          href='https://chakra-ui.com'\n          fontSize='2xl'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Learn Chakra\n        </Link>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  theme\n} from '@chakra-ui/react'\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\nimport { Main } from './components/Main'\nimport { Subject } from './components/Subject'\n\nfunction App () {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign='center' fontSize='xl'>\n        <Grid minH='100vh' p={3}>\n          <ColorModeSwitcher justifySelf='flex-end' />\n          <VStack spacing={8}>\n            <BrowserRouter>\n              <Switch>\n                <Route exact path='/' component={Main} />\n                <Route exact path='/:id' component={Subject} />\n              </Switch>\n            </BrowserRouter>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport React, { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}