{
  "questions": [
    {
      "question": "자식 프로세스를 부모 자원의 부분 집합으로 제한하는 것은 어떤 프로세스가 ___ 것을 방지하기 위함이다.",
      "choices": [
        "많은 보조 기억 장치를 사용함으로써 시스템에 부하를 만드는",
        "매우 낮은 CPU 활용도로 시스템에 적게 부하를 주는",
        "많은 서브프로세스를 만듦으로써 시스템에 부하를 주는",
        "많은 자원을 활용함으로써 시스템에 장애를 주는"
      ],
      "answer": 3,
      "explanation": "-"
    },
    {
      "question": "___ system call을 부르는 부모 프로세스는 자식 프로세스들이 종료될 때까지 정지된다.",
      "choices": [
        "wait",
        "fork",
        "exit",
        "exec"
      ],
      "answer": 1,
      "explanation": "-"
    },
    {
      "question": "모든 자식 프로세스가 종료한 뒤에 부모 프로세스를 종료하는 것을 ___라 한다.",
      "choices": [
        "Normal termination",
        "Abnormal termination",
        "Cascading termination",
        "Circular termination"
      ],
      "answer": 3,
      "explanation": "-"
    },
    {
      "question": "___는 한 프로세서에서 다른 모든 프로세스를 대기시키면서 한 번에 오직 하나의 프로세스만 실행시키는 반면, ___는 여러 프로세스를 동시에 다른 프로세서에서 실행시킬 수 있다.",
      "choices": [
        "Multiprocessing, Multiprogramming",
        "Multiprogramming, Uniprocessing",
        "Multiprogramming, Multiprocessing",
        "Uniprogramming, Multiprocessing"
      ],
      "answer": 4,
      "explanation": "-"
    },
    {
      "question": "각 프로세스는 ___로 식별할 수 있다.",
      "choices": [
        "Process Control Block",
        "Device Queue",
        "Process Identifier",
        "모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "-"
    },
    {
      "question": "UNIX의 'fork' system call은 자식 프로세스에는 ___를 반환하고 부모 프로세스에는 ___를 반환한다.",
      "choices": [
        "음수, 0",
        "0, 음수",
        "양수, 0",
        "0, 양수"
      ],
      "answer": 4,
      "explanation": "-",
      "references": [{"fork": "https://en.wikipedia.org/wiki/Fork_(system_call)"}]
    },
    {
      "question": "자식 프로세스가 수행을 마쳤을 때 부모 프로세스가 실행 중이라면 자식 프로세스는 ___가 된다.",
      "choices": [
        "고아 프로세스 (Orphan)",
        "좀비 프로세스 (Zombie)",
        "부모 프로세스",
        "죽은 프로세스"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [{"Zombie process": "https://en.wikipedia.org/wiki/Zombie_process"}, {"Orphan process": "https://en.wikipedia.org/wiki/Orphan_process"}]
    },
    {
      "question": "다음 중 프로세스를 위한 Queue가 아닌 것은?",
      "choices": [
        "Job Queue",
        "PCB Queue",
        "Device Queue",
        "Ready Queue"
      ],
      "answer": 2,
      "explanation": "-"
    },
    {
      "question": "프로세스가 I/O를 요청했을 때, ___에 배치된다.",
      "choices": [
        "I/O queue",
        "Waiting queue",
        "Ready queue",
        "Job Queue"
      ],
      "answer": 1,
      "explanation": "-",
      "references": [{"Process state" : "https://en.wikipedia.org/wiki/Process_state"}]
    },
    {
      "question": "프로세스가 종료될 때 발생하는 일은?",
      "choices": [
        "모든 queue에서 삭제된다.",
        "Job queue를 제외한 queue에서 삭제된다.",
        "PCB의 할당이 해제된다.",
        "PCB의 할당이 해제되지않는다."
      ],
      "answer": 1,
      "explanation": "-"
    },
    {
      "question": "Long-term scheduler란?",
      "choices": [
        "ready queue에 옮겨질 프로세스를 선택한다.",
        "waiting queue에 옮겨질 프로세스를 선택한다.",
        "다음에 CPU를 할당받고 실행될 프로세스를 선택한다.",
        "메모리에서 스왑되어 제거될 프로세스를 선택한다."
      ],
      "answer": 1,
      "explanation": "-",
      "references": [{"Long-term scheduler": "https://en.wikipedia.org/wiki/Scheduling_(computing)#Long-term_scheduling"}]
    },
    {
      "question": "만약 모든 프로세스가 I/O bound라면 ready queue는 거의 항상 ___ short-term scheduler는 할 일이 ___",
      "choices": [
        "꽉 차있고, 적다",
        "꽉 차있고, 많다",
        "비어있고, 적다",
        "비어있고, 많다"
      ],
      "answer": 3,
      "explanation": "-",
      "references": [{"Short-term scheduler": "https://en.wikipedia.org/wiki/Scheduling_(computing)#Short-term_scheduling"}]
    }
  ]
}
