{
  "questions": [
    {
      "question": "DMA는 ___를 위해 사용된다.",
      "choices": [
        "하드디스크",
        "그래픽카드",
        "멀티코어 프로세서",
        "위에 언급된 모두 해당"
      ],
      "answer": 4,
      "explanation": "Direct Memory Access (DMA) 는 CPU와는 독립적인 하드웨어를 통해 메모리에 직접 접근할 수 있도록 지원하는 기법입니다. 데이터 전송에 CPU의 개입이 불필요해 데이터 전송을 위해 읽고 쓰기를 하는 대신 다른 작업의 처리를 할 수 있게 되어 CPU 효율이 증가합니다. 멀티코어 프로세서 시스템에서 DMA는 프로세서 간의 데이터 전송을 지원하기도 합니다.",
      "references": [
        {"[한] DMA": "https://ko.wikipedia.org/wiki/%EC%A7%81%EC%A0%91_%EB%A9%94%EB%AA%A8%EB%A6%AC_%EC%A0%91%EA%B7%BC"},
        {"DMA": "https://en.wikipedia.org/wiki/Direct_memory_access"}
      ]
    },
    {
      "question": "Memory-mapped I/O (MMIO) 에 대한 설명으로 맞는 것은?",
      "choices": [
        "입출력 장치가 데이터를 주고받을 준비가 되었는지 CPU가 지속적으로 폴링 (polling) 하며 확인한다.",
        "입출력 장치와 메모리가 같은 주소 버스 (address bus) 를 사용한다.",
        "입출력 장치가 데이터를 주고받을 준비가 되었을 때 CPU가 인터럽트 (interrupt) 를 받는다.",
        "CPU 외에 입출력 장치로부터 데이터를 읽어오기 위한 장치가 있다."
      ],
      "answer": 2,
      "explanation": "MMIO란 메모리 공간 중 일부를 입출력 장치에 할당하여 쓰는 방식으로 일반 데이터를 읽고 쓰는 것처럼 I/O를 쓸 수 있습니다. 설계 관점에서 단순해지는 반면 I/O가 일반적으로 메모리 접근보다 느리기때문에 같은 주소 버스를 사용하게되는 메모리 접근이 영향을 받아 느려질 수 있습니다.",
      "references": [
        {"[한] MMIO": "https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%A7%B5_%EC%9E%85%EC%B6%9C%EB%A0%A5"},
        {"MMIO": "https://en.wikipedia.org/wiki/Memory-mapped_I/O"}
      ]
    },
    {
      "question": "Programmed I/O (PIO) 에 대한 설명으로 맞는 것은?",
      "choices": [
        "입출력 장치가 데이터를 주고받을 준비가 되었는지 CPU가 지속적으로 폴링 (polling) 하며 확인한다.",
        "입출력 장치와 메모리가 같은 주소 버스 (address bus) 를 사용한다.",
        "입출력 장치가 데이터를 주고받을 준비가 되었을 때 CPU가 인터럽트 (interrupt) 를 받는다.",
        "CPU 외에 입출력 장치로부터 데이터를 읽어오기 위한 장치가 있다."
      ],
      "answer": 1,
      "explanation": "Programmed I/O 또는 Polled I/O라 불리는 PIO는 입출력 장치와의 매 데이터 전송마다 CPU가 개입합니다.",
      "references": [
        {"[한] PIO": "https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8_%EC%9E%85%EC%B6%9C%EB%A0%A5"},
        {"PIO": "https://en.wikipedia.org/wiki/Programmed_input%E2%80%93output"},
        {"Polling": "https://en.wikipedia.org/wiki/Polling_(computer_science)"}
      ]
    },
    {
      "question": "Interrupt-driven I/O에 대한 설명으로 맞는 것은?",
      "choices": [
        "입출력 장치가 데이터를 주고받을 준비가 되었는지 CPU가 지속적으로 폴링 (polling) 하며 확인한다.",
        "입출력 장치와 메모리가 같은 주소 버스 (address bus) 를 사용한다.",
        "입출력 장치가 데이터를 주고받을 준비가 되었을 때 CPU가 인터럽트 (interrupt) 를 받는다.",
        "CPU 외에 입출력 장치로부터 데이터를 읽어오기 위한 장치가 있다."
      ],
      "answer": 3,
      "explanation": "인터럽트 (interrupt) 는 비동기로 동작하기 때문에 계속해서 하드웨어 자원을 소모하는 PIO (Programmed I/O) 보다 효율적입니다.",
      "references": [
        {"Interrupt": "https://en.wikipedia.org/wiki/Interrupt"},
        {"Interrupt-driven I/O": "http://inputoutput5822.weebly.com/interrupt-driven-io.html"}
      ]
    },
    {
      "question": "컴퓨터 간 또는 컴퓨터 내의 부품들 간 데이터 송수신에 쓰이는 매체를 ___라 한다.",
      "choices": [
        "Wire",
        "CPU",
        "Bus",
        "Buffer"
      ],
      "answer": 3,
      "explanation": "데이터 전달을 위해 전기 신호를 보낼 수 있는 하드웨어, 즉 매체들을 버스 (bus) 라 합니다.",
      "references": [
        {"[한] Bus": "https://ko.wikipedia.org/wiki/%EB%B2%84%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)"},
        {"Bus": "https://en.wikipedia.org/wiki/Bus_(computing)"}
      ]
    },
    {
      "question": "메시지들이 유선 매체를 통해서 어떻게 보내져야 하는지에 대한 규칙이 정의된 프로토콜이 구현된 소프트웨어를 ___라 한다.",
      "choices": [
        "Port",
        "Bus",
        "Node",
        "Wire"
      ],
      "answer": 2,
      "explanation": "컴퓨터 공학에서 버스 (Bus) 는 넓게 데이터가 이동하는 통로를 뜻합니다. 하드웨어 뿐만 아니라 통신 프로토콜과 같은 소프트웨어도 버스의 정의에 포함됩니다.",
      "references": [
        {"[한] Bus": "https://ko.wikipedia.org/wiki/%EB%B2%84%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)"},
        {"Bus": "https://en.wikipedia.org/wiki/Bus_(computing)"}
      ]
    },
    {
      "question": "다음 중 장치 드라이버 (device driver) 에 대한 설명으로 틀린 것은?",
      "choices": [
        "하드웨어를 제어하기 위한 인터페이스를 제공하는 프로그램이다.",
        "커널 모드로 실행되기도 한다.",
        "사용자 모드로 실행되기도 한다.",
        "동기 (Synchronous) 방식으로만 작동한다."
      ],
      "answer": 4,
      "explanation": "장치 드라이버 (device driver) 는 운영체제와 구현에 따라서 커널 모드에서 실행될 수도 사용자 모드에서 실행될 수도 있습니다. 커널 모드에서 실행하면 문제가 있었을 때 커널 메모리를 오염시켜 시스템 충돌 (system crash) 을 야기할 수도 있습니다.\n장치 드라이버는 동기 I/O (synchronous I/O) 일 수도, 비동기 I/O (asynchronous I/O) 일 수도 있습니다.",
      "references": [
        {"[한] Device driver": "https://ko.wikipedia.org/wiki/%EC%9E%A5%EC%B9%98_%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84"},
        {"Device driver": "https://en.wikipedia.org/wiki/Device_driver"},
        {"[한] Asynchronous I/O": "https://ko.wikipedia.org/wiki/%EB%B9%84%EB%8F%99%EA%B8%B0_%EC%9E%85%EC%B6%9C%EB%A0%A5"},
        {"Asynchronous I/O": "https://en.wikipedia.org/wiki/Asynchronous_I/O"}
      ]
    },
    {
      "question": "문자 장치 (Character device) 는 데이터를 ___.",
      "choices": [
        "1 비트 (bit) 씩 전송한다",
        "1 바이트 (byte) 씩 전송한다",
        "1 블록 (block) 씩 전송한다",
        "위에 언급된 모두 해당 안됨"
      ],
      "answer": 2,
      "explanation": "문자 장치 (Character device) 는 하드웨어 장치에 직접 접근을 제공하는 원시적인 인터페이스입니다. 원시적이라고는 하지만 운영체제 레벨에서 제공하는 인터페이스이고 이름처럼 character 단위이기에 1비트가 아니라 한번에 1바이트씩 읽거나 씁니다.",
      "references": [
        {"[한] Character device": "https://ko.wikipedia.org/wiki/%EC%9E%A5%EC%B9%98_%ED%8C%8C%EC%9D%BC#%EB%AC%B8%EC%9E%90_%EC%9E%A5%EC%B9%98"},
        {"Character device": "https://en.wikipedia.org/wiki/Device_file#Character_devices"}
      ]
    },
    {
      "question": "블록 장치 (Block device) 는 데이터를 ___.",
      "choices": [
        "1 비트 (bit) 씩 전송한다",
        "1 바이트 (byte) 씩 전송한다",
        "1 블록 (block) 씩 전송한다",
        "위에 언급된 모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "블록 장치 (Block device) 는 버퍼링을 지원하여 특정 크기의 블록 단위로 읽고 쓰는 것을 지원하는 인터페이스입니다. 블록의 크기는 프로그래밍 가능하여 1바이트일 수도 있고 수십 바이트 또는 그 이상일 수도 있습니다.",
      "references": [
        {"[한] Block device": "https://ko.wikipedia.org/wiki/%EC%9E%A5%EC%B9%98_%ED%8C%8C%EC%9D%BC#%EB%B8%94%EB%A1%9D_%EC%9E%A5%EC%B9%98"},
        {"Block device": "https://en.wikipedia.org/wiki/Device_file#Block_devices"}
      ]
    },
    {
      "question": "프로세서는 임계구역 (Critical section) 실행 중 방해받지 않도록 ___ 인터럽트를 무시할 수 있다.",
      "choices": [
        "Non-maskable",
        "Maskable",
        "Synchronous",
        "Asynchronous"
      ],
      "answer": 2,
      "explanation": "Maskable 인터럽트란 마스킹이 가능한 인터럽트를 말합니다. 마스킹될 경우 인터럽트 신호는 프로세서에 의해 무시되어 인터럽트 핸들러 (ISR) 가 실행되지 않게 됩니다.",
      "references": [
        {"[한] Interrupt": "https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8"},
        {"Interrupt": "https://en.wikipedia.org/wiki/Interrupt"},
        {"NMI": "https://en.wikipedia.org/wiki/Non-maskable_interrupt"}
      ]
    },
    {
      "question": "Non-maskable interrupt (NMI) 에 대한 설명으로 틀린 것은?",
      "choices": [
        "Maskable 인터럽트보다 우선순위가 낮다.",
        "마스킹이 불가능한 인터럽트이다.",
        "일반적으로 외부 장치가 아니라 내부 시스템에서 발생된다.",
        "디버깅 (debugging) 에 쓰인다."
      ],
      "answer": 1,
      "explanation": "NMI는 우선순위가 높기 때문에 프로세서가 임의로 무시할 수 없는 인터럽트입니다. 자동으로 복구가 불가능해 즉각적으로 대응이 필요한 경우가 포함됩니다. 예를 들어, 패리티 비트 (parity bit) 나 ECC (Error Correction Code) 에 의해 시스템 메모리가 오염된 것을 감지했을 때 에러는 바로 수정되어야 합니다.\n즉각적으로 시스템이 수행 중인 코드를 멈추고 진단할 수 있으므로 디버깅에 쓰이기도 합니다.",
      "references": [
        {"[한] Interrupt": "https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8"},
        {"Interrupt": "https://en.wikipedia.org/wiki/Interrupt"},
        {"NMI": "https://en.wikipedia.org/wiki/Non-maskable_interrupt"},
        {"[한] Parity bit": "https://ko.wikipedia.org/wiki/%ED%8C%A8%EB%A6%AC%ED%8B%B0_%EB%B9%84%ED%8A%B8"},
        {"Parity bit": "https://en.wikipedia.org/wiki/Parity_bit"},
        {"[한] ECC": "https://ko.wikipedia.org/wiki/%EC%98%A4%EB%A5%98_%EA%B2%80%EC%B6%9C_%EC%A0%95%EC%A0%95"},
        {"ECC": "https://en.wikipedia.org/wiki/Error_correction_code"}
      ]
    },
    {
      "question": "폴링 (Polling) 은 ___ 방식이다.",
      "choices": [
        "Blocking",
        "Interrupt",
        "Asynchronous",
        "Busy waiting"
      ],
      "answer": 4,
      "explanation": "폴링 (Polling) 은 주기적으로 상태를 확인하는 행위로 I/O에서 흔히 사용됩니다. 응답이 있을 때까지 계속하여 능동적으로 확인하기 때문에 대기 시간이 길어질수록 오버헤드 (overhead) 가 커집니다. 주기를 길게 하면 오버헤드가 감소될 수 있으나, 응답이 있었음에도 불구하고 바로 인지하지 못하여 응답 시간이 길어질 수 있습니다.\n폴링은 응답이 올 때까지 CPU를 계속 점유하고 있는 것이 아니므로 블로킹 (blocking) 이 아닙니다. 또한 폴링을 통해 콜백 (callback) 을 사용하지 않고 상태를 바로 확인하고 있으므로 동기 (synchronous) 방식입니다.",
      "references": [
        {"[한] Polling": "https://ko.wikipedia.org/wiki/%ED%8F%B4%EB%A7%81_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)"},
        {"Polling": "https://en.wikipedia.org/wiki/Polling_(computer_science)"},
        {"[한] Busy waiting": "https://ko.wikipedia.org/wiki/%EB%B0%94%EC%81%9C_%EB%8C%80%EA%B8%B0"},
        {"Busy waiting": "https://en.wikipedia.org/wiki/Busy_waiting"},
        {"[한] Callback": "https://ko.wikipedia.org/wiki/%EC%BD%9C%EB%B0%B1"},
        {"Callback": "https://en.wikipedia.org/wiki/Callback_(computer_programming)"}
      ]
    },
    {
      "question": "논블로킹 I/O (Non-blocking I/O) 는 ___.",
      "choices": [
        "프로세스의 실행을 중지시킨다",
        "프로세스의 실행을 중지시키지 않는다",
        "인터럽트를 발생시킨다",
        "인터럽트를 발생시키지 않는다"
      ],
      "answer": 2,
      "explanation": "논블로킹 I/O (Non-blocking I/O) 는 프로세스를 중지시키지 않습니다. 즉 waiting state가 되지 않습니다.\n논블로킹인 것 만으로는 어떤 시스템 콜을 사용하는지 알 수 없으므로 인터럽트 여부는 알 수 없습니다.",
      "references": [
        {"[한] Asynchronous I/O": "https://ko.wikipedia.org/wiki/%EB%B9%84%EB%8F%99%EA%B8%B0_%EC%9E%85%EC%B6%9C%EB%A0%A5"},
        {"Asynchronous I/O": "https://en.wikipedia.org/wiki/Asynchronous_I/O"}
      ]
    },
    {
      "question": "비동기 I/O (Asynchronous I/O) 는 ___.",
      "choices": [
        "응답이 느리다",
        "콜백 (callback) 을 사용할 수 있다",
        "호출이 끝난 시점에 I/O도 완료된다",
        "프로세스의 실행을 중지시킨다"
      ],
      "answer": 2,
      "explanation": "비동기 I/O (Asynchronous I/O) 는 호출에 대해서 우선 응답을 한 후 별도로 처리합니다. 따라서 I/O 완료 시간은 길 수 있지만 응답 자체는 빠릅니다. I/O 결과는 콜백 (callback) 을 통해 확인할 수 있습니다.",
      "references": [
        {"[한] Asynchronous I/O": "https://ko.wikipedia.org/wiki/%EB%B9%84%EB%8F%99%EA%B8%B0_%EC%9E%85%EC%B6%9C%EB%A0%A5"},
        {"Asynchronous I/O": "https://en.wikipedia.org/wiki/Asynchronous_I/O"},
        {"[한] Callback": "https://ko.wikipedia.org/wiki/%EC%BD%9C%EB%B0%B1"},
        {"Callback": "https://en.wikipedia.org/wiki/Callback_(computer_programming)"}
      ]
    }
  ]
}
