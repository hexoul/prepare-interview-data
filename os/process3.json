{
  "questions": [
    {
      "question": "여러 프로세스가 같은 데이터를 동시에 접근할 때 실행 결과가 접근 순서에 의존하는 상황을 무엇이라 하는가?",
      "choices": [
        "Dynamic condition",
        "Race condition",
        "Essential condition",
        "Critical condition"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [{"Race condition": "https://en.wikipedia.org/wiki/Race_condition#Software"}]
    },
    {
      "question": "만약 한 프로세스가 critical section을 실행 중이라면, 다른 프로세스들은 자신의 critical section을 실행할 수 없게 된다. 이를 무엇이라 하는가?",
      "choices": [
        "Mutual exclusion",
        "Critical exclusion",
        "Synchronous exclusion",
        "Asynchronous exclusion"
      ],
      "answer": 1,
      "explanation": "Critical section은 동시에 한 프로세스만 진입할 수 있고 병렬도를 위해 일정시간 이상의 수행은 허용되지않습니다.",
      "references": [{"Critical section": "https://en.wikipedia.org/wiki/Critical_section"}, {"[한]Critical section": "https://ko.wikipedia.org/wiki/%EC%9E%84%EA%B3%84_%EA%B5%AC%EC%97%AD"}]
    },
    {
      "question": "다음 중 동기화에 쓰이는 자원은?",
      "choices": [
        "Thread",
        "Pipe",
        "Semaphore",
        "Socket"
      ],
      "answer": 3,
      "explanation": "-",
      "references": [{"Semaphore": "https://en.wikipedia.org/wiki/Semaphore_(programming)"}]
    },
    {
      "question": "상호 배제 (Mutual exclusion)는 ___을 통해 제공받을 수 있다.",
      "choices": [
        "Mutex locks",
        "Binary semaphore",
        "Mutex locks와 binary semaphore",
        "모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "Binary semaphore는 mutex lock으로도 알려져 있습니다."
    },
    {
      "question": "High priority task가 medium priority task에 의해 간접적으로 선점되어질 때 두 task의 상대 우선순위가 도치된다. 이런 상황을 무엇이라 하는가?",
      "choices": [
        "Priority removal",
        "Priority inversion",
        "Priority exchange",
        "Priority modification"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [{"Prirority inversion": "https://en.wikipedia.org/wiki/Priority_inversion"}]
    },
    {
      "question": "프로세스 동기화는 ___에서 이루어진다.",
      "choices": [
        "hardware level",
        "software level",
        "hardware and software level",
        "모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "Critical section을 기반으로 한 프로세스 선점 (preemption) 제어는 hardware와 software에서 모두 이루어질 수 있습니다. Software level은 OS scheduling 기법들로 구현될 수 있습니다. Hardware level의 예로는 interrupt를 일시적으로 disable 시키거나 lock 제어를 위한 compare-and-swap을 hardware instruction level로 제공하는 것이 있습니다.",
      "references": [{"Hardware synchronization": "https://en.wikipedia.org/wiki/Synchronization_(computer_science)#Hardware_synchronization"}]
    },
    { 
      "question": "Inter-process communication (IPC) 란?",
      "choices": [
        "같은 주소 공간을 사용할 때 프로세스 간에 행해지는 통신과 동기화",
        "같은 주소 공간을 사용하지않는 프로세스 간의 통신과 동기화",
        "프로세스 간에 통신없이 동기화",
        "네트워크를 통한 프로세스 간의 통신과 동기화"
      ],
      "answer": 2,
      "explanation": "IPC는 프로세스 간에 데이터를 공유하기위해 통신을 가능하게 만드는 메커니즘으로, 이는 파일, 소켓, 메세지큐 등을 통해 다양하게 구현될 수 있습니다. 따라서 네트워크를 통하는 것만이라고 한정지을 수 없습니다. 보기 1의 설명은 IPC의 설명으로는 맞지않고 통신 부분을 뺀다면 critical section을 통해 동기화하는 semaphore 등의 동기화 기법의 설명으로 볼 수 있습니다.",
      "references": [{"IPC": "https://en.wikipedia.org/wiki/Inter-process_communication"}]
    },
    {
      "question": "Message passing 시스템은 프로세스가 ___ 하는 것을 가능하게 해준다.",
      "choices": [
        "공유 데이터를 사용하지않고 다른 프로세스와 통신",
        "공유 데이터를 사용하여 다른 프로세스와 통신",
        "다른 프로세스에 데이터를 직접 공유",
        "메세지의 발신자와 수신자의 이름을 기록"
      ],
      "answer": 1,
      "explanation": "Message passing 시스템은 메세지 큐 또는 채널을 통해 메세지를 전달하는 시스템으로 수신 측에서 가져가는 작업이 있어야만 데이터가 최종적으로 전달됩니다.",
      "references": [{"Message passing": "https://en.wikipedia.org/wiki/Message_passing"}]
    },
    {
      "question": "다음 중 IPC로부터 제공받는 두 operation은?",
      "choices": [
        "write & delete message",
        "delete & receive message",
        "send & delete message",
        "receive & send message"
      ],
      "answer": 4,
      "explanation": "-"
    },
    {
      "question": "프로세스로부터 보내지는 메세지의 크기는 ___",
      "choices": [
        "고정되어야 한다.",
        "가변이어야 한다.",
        "고정일 수도 있고 가변일 수도 있다.",
        "운영체제마다 다르다."
      ],
      "answer": 3,
      "explanation": "-"
    },
    {
      "question": "메세지를 보내고 받기 위한 두 프로세스 간의 링크를 ___라 한다.",
      "choices": [
        "Communication link",
        "Message-passing link",
        "Synchronization link",
        "Process link"
      ],
      "answer": 1,
      "explanation": "-"
    },
    {
      "question": "다음 중 direct communication에 대해 맞는 설명은?",
      "choices": [
        "하나의 communication link가 N 개의 프로세스와 연결될 수 있다.",
        "하나의 communication link는 정확히 두 프로세스와만 연결된다.",
        "N 개의 프로세스가 있을 때 정확히 N/2 개의 communication link가 존재한다.",
        "연결된 두 프로세스의 쌍(pair)마다 정확히 두 개의 링크를 가진다."
      ],
      "answer": 2,
      "explanation": "한 프로세스가 여러 프로세스와 연결될 수 있고 각 연결에서 한 link가 쓰이므로, N 개의 프로세스가 있다면 조합의 수인 nC2 = N! / 2! * (N - 2)! 개 만큼 link가 존재할 수 있다.",
      "references": [{"Combination": "https://en.wikipedia.org/wiki/Combination"}]
    }
  ]
}
