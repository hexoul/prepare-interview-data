{
  "questions": [
    {
      "question": "여러 프로세스가 같은 데이터를 동시에 접근할 때 실행 결과가 접근 순서에 의존하는 상황을 무엇이라 하는가?",
      "choices": [
        "Dynamic condition",
        "Race condition",
        "Essential condition",
        "Critical condition"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [{"Race condition": "https://en.wikipedia.org/wiki/Race_condition#Software"}]
    },
    {
      "question": "만약 한 프로세스가 critical section을 실행 중이라면, 다른 프로세스들은 자신의 critical section을 실행할 수 없게 된다. 이를 무엇이라 하는가?",
      "choices": [
        "Mutual exclusion",
        "Critical exclusion",
        "Synchronous exclusion",
        "Asynchronous exclusion"
      ],
      "answer": 1,
      "explanation": "Critical section은 동시에 한 프로세스만 진입할 수 있고 병렬도를 위해 일정시간 이상의 수행은 허용되지않습니다.",
      "references": [
        {"[한]Critical section": "https://ko.wikipedia.org/wiki/%EC%9E%84%EA%B3%84_%EA%B5%AC%EC%97%AD"},
        {"Critical section": "https://en.wikipedia.org/wiki/Critical_section"}
      ]
    },
    {
      "question": "다음 중 동기화에 쓰이는 자원은?",
      "choices": [
        "Thread",
        "Pipe",
        "Semaphore",
        "Socket"
      ],
      "answer": 3,
      "explanation": "-",
      "references": [{"Semaphore": "https://en.wikipedia.org/wiki/Semaphore_(programming)"}]
    },
    {
      "question": "상호 배제 (Mutual exclusion)는 ___을 통해 제공받을 수 있다.",
      "choices": [
        "Mutex locks",
        "Binary semaphore",
        "Mutex locks와 binary semaphore",
        "모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "Binary semaphore는 mutex lock으로도 알려져 있습니다."
    },
    {
      "question": "High priority task가 medium priority task에 의해 간접적으로 선점되어질 때 두 task의 상대 우선순위가 도치된다. 이런 상황을 무엇이라 하는가?",
      "choices": [
        "Priority removal",
        "Priority inversion",
        "Priority exchange",
        "Priority modification"
      ],
      "answer": 2,
      "explanation": "-",
      "references": [{"Prirority inversion": "https://en.wikipedia.org/wiki/Priority_inversion"}]
    },
    {
      "question": "프로세스 동기화는 ___에서 이루어진다.",
      "choices": [
        "hardware level",
        "software level",
        "hardware and software level",
        "모두 해당 안됨"
      ],
      "answer": 3,
      "explanation": "Critical section을 기반으로 한 프로세스 선점 (preemption) 제어는 hardware와 software에서 모두 이루어질 수 있습니다. Software level은 OS scheduling 기법들로 구현될 수 있습니다. Hardware level의 예로는 interrupt를 일시적으로 disable 시키거나 lock 제어를 위한 compare-and-swap을 hardware instruction level로 제공하는 것이 있습니다.",
      "references": [
        {"Hardware synchronization": "https://en.wikipedia.org/wiki/Synchronization_(computer_science)#Hardware_synchronization"}
      ]
    },
    { 
      "question": "Inter-process communication (IPC) 란?",
      "choices": [
        "같은 주소 공간을 사용할 때 프로세스 간에 행해지는 통신과 동기화",
        "같은 주소 공간을 사용하지않는 프로세스 간의 통신과 동기화",
        "프로세스 간에 통신없이 동기화",
        "네트워크를 통한 프로세스 간의 통신과 동기화"
      ],
      "answer": 2,
      "explanation": "IPC는 프로세스 간에 데이터를 공유하기위해 통신을 가능하게 만드는 메커니즘으로, 이는 파일, 소켓, 메세지큐 등을 통해 다양하게 구현될 수 있습니다. 따라서 네트워크를 통하는 것만이라고 한정지을 수 없습니다. 보기 1의 설명은 IPC의 설명으로는 맞지않고 통신 부분을 뺀다면 critical section을 통해 동기화하는 semaphore 등의 동기화 기법의 설명으로 볼 수 있습니다.",
      "references": [{"IPC": "https://en.wikipedia.org/wiki/Inter-process_communication"}]
    },
    {
      "question": "Message passing 시스템은 프로세스가 ___ 하는 것을 가능하게 해준다.",
      "choices": [
        "공유 데이터를 사용하지않고 다른 프로세스와 통신",
        "공유 데이터를 사용하여 다른 프로세스와 통신",
        "다른 프로세스에 데이터를 직접 공유",
        "메세지의 발신자와 수신자의 이름을 기록"
      ],
      "answer": 1,
      "explanation": "Message passing 시스템은 메세지 큐 또는 채널을 통해 메세지를 전달하는 시스템으로 수신 측에서 가져가는 작업이 있어야만 데이터가 최종적으로 전달됩니다.",
      "references": [{"Message passing": "https://en.wikipedia.org/wiki/Message_passing"}]
    },
    {
      "question": "다음 중 IPC로부터 제공받는 두 operation은?",
      "choices": [
        "write & delete message",
        "delete & receive message",
        "send & delete message",
        "receive & send message"
      ],
      "answer": 4,
      "explanation": "-",
      "references": [
        {"IPC": "https://en.wikipedia.org/wiki/Inter-process_communication"}
      ]
    },
    {
      "question": "프로세스로부터 보내지는 메세지의 크기는 ___",
      "choices": [
        "고정되어야 한다.",
        "가변이어야 한다.",
        "고정일 수도 있고 가변일 수도 있다.",
        "운영체제마다 다르다."
      ],
      "answer": 3,
      "explanation": "메세지 크기는 고정과 가변 둘 다 가능하며 각각 장단점이 있습니다. 고정일 경우 OS 설계자 입장에서는 구현이 간단해지지만 애플리케이션 개발자 입장에서는 구현이 복잡해질 수 있습니다. 반대로 가변일 경우 OS 설계자 입장에서는 복잡해지지만 애플리케이션 개발자는 보다 쉽게 개발할 수 있는 여지가 생깁니다.\n\n결과적으로 고정과 가변을 모두 제공하기 위해서 표준 메세지는 고정된 크기의 header와 가변 body를 가집니다. Header에 메세지 제어를 위한 정보와 함께 길이 정보도 있어 이에 기반하여 body 범위를 인지하고 얻어옵니다.",
      "references": [
        {"Message passing": "https://www.geeksforgeeks.org/inter-process-communication-ipc"}
      ]
    },
    {
      "question": "메세지를 보내고 받기 위한 두 프로세스 간의 링크를 ___라 한다.",
      "choices": [
        "Communication link",
        "Message-passing link",
        "Synchronization link",
        "Process link"
      ],
      "answer": 1,
      "explanation": "-",
      "references": [{"Communication link": "https://www.geeksforgeeks.org/inter-process-communication-ipc"}]
    },
    {
      "question": "다음 중 direct communication에 대해 맞는 설명은?",
      "choices": [
        "하나의 communication link가 N 개의 프로세스와 연결될 수 있다.",
        "하나의 communication link는 정확히 두 프로세스와만 연결된다.",
        "N 개의 프로세스가 있을 때 정확히 N/2 개의 communication link가 존재한다.",
        "연결된 두 프로세스의 쌍(pair)마다 정확히 두 개의 링크를 가진다."
      ],
      "answer": 2,
      "explanation": "한 프로세스가 여러 프로세스와 연결될 수 있고 각 연결에서 한 link가 쓰이므로, N 개의 프로세스가 있다면 조합의 수인 nC2 = N! / 2! * (N - 2)! 개 만큼 link가 존재할 수 있습니다.",
      "references": [
        {"Communication link": "https://www.geeksforgeeks.org/inter-process-communication-ipc"},
        {"Combination": "https://en.wikipedia.org/wiki/Combination"}
      ]
    },
    {
      "question": "다음 중 프로세스 P와 Q의 indirect communication에 대해 맞는 설명은?",
      "choices": [
        "프로세스 P와 Q 사이에서 메세지를 받아 전달해주는 프로세스 R이 존재한다.",
        "두 프로세스 간의 통신을 돕기위한 별도 머신이 존재한다.",
        "두 프로세스 간의 통신을 돕기위한 mailbox가 존재한다.",
        "direct communication보다 느리다."
      ],
      "answer": 3,
      "explanation": "Indirect communication에서 송신자는 메세지를 mailbox에 저장하고 수신자는 메세지를 mailbox로부터 꺼내가게 됩니다. 속도에 관해서는 communication 자체의 구현뿐만 아니라 송수신 측의 구현에도 의존하므로 direct냐 indirect냐만 가지고 단적으로 속도 비교를 할 수는 없습니다.",
      "references": [{"Communication link": "https://www.geeksforgeeks.org/inter-process-communication-ipc"}]
    },
    {
      "question": "Non-blocking 프로세스는 ___",
      "choices": [
        "메세지가 수신될 때까지 계속하여 메세지를 보낸다.",
        "메세지를 받을 때까지 계속하여 메세지를 보낸다.",
        "메세지를 보내고 메세지를 받을 때까지 대기한다.",
        "메세지를 보내고 작업을 재개한다."
      ],
      "answer": 4,
      "explanation": "비동기 프로세스는 다른 쓰레드의 작업을 실패시키거나 중지시키면 안되기때문에, 메세지를 보내는 경우 쓰기만 하고 결과는 polling 등을 통해 추후에 확인합니다.",
      "references": [
        {"Non-blocking algorithm": "https://en.wikipedia.org/wiki/Non-blocking_algorithm"},
        {"Asynchronous I/O": "https://en.wikipedia.org/wiki/Asynchronous_I/O"}
      ]
    },
    {
      "question": "Zero capacity queue에 대해서 올바른 설명은?",
      "choices": [
        "Queue가 적어도 하나의 메세지를 저장할 수 있다.",
        "송신자는 수신자가 메세지를 받아갈 때까지 블록된다.",
        "송신자는 계속해서 메세지를 보낼 수 있지만 메세지가 queue에 머무르지 않는다.",
        "송신자는 상황에 따라 블록될 수도 안될 수도 있다."
      ],
      "answer": 2,
      "explanation": "Zero capacity queue란 queue의 크기가 0인 것을 의미하므로, 메세지 전달을 보장하기 위해서 송신자는 수신자가 메세지를 받아갈 때까지 블록되어야 합니다."
    },
    {
      "question": "Zero capacity queue는 ___라고도 불린다.",
      "choices": [
        "No-buffering message system",
        "Buffering message system",
        "Process link",
        "Unbounded link"
      ],
      "answer": 1,
      "explanation": "-"
    },
    {
      "question": "Bounded 또는 unbounded capacity queue는 ___라고 볼 수 있다.",
      "choices": [
        "프로그램되어진 버퍼링",
        "자동 버퍼링",
        "사용자 정의 버퍼링",
        "No buffering"
      ],
      "answer": 2,
      "explanation": "Bounded 또는 unbounded capacity queue는 queue의 길이가 제한(bounded)되었거나 무한대(unbounded)인 queue를 의미합니다. 따라서 프로세스를 블록시키도록 프로그래밍 것이 아니라 queue의 특성과 사용 패턴에 따라 자동으로 버퍼링되는 것이므로 automatic 또는 explicit buffering이라고 언급되기도 합니다."
    },
    {
      "question": "Non-blocking 알고리즘의 wait-free와 lock-free에 대한 설명으로 틀린 것은?",
      "choices": [
        "Wait-free 알고리즘 하에서는 기아 (starvation) 가 없다.",
        "Lock-free 알고리즘은 lock이 없어 공유 자원을 위한 경쟁이 필요없다.",
        "모든 wait-free 알고리즘은 lock-free이다.",
        "wait-free 알고리즘이 lock-free보다 구현이 어렵다."
      ],
      "answer": 2,
      "explanation": "Wait-free는 non-blocking에서 가장 강력한 자유도를 보장하는 수준으로 반응성이 보장되어야하는 실시간 시스템에서 중요한 특성입니다. 강력한 대신에 구현이 어렵고 제약이 많습니다. Lock-free는 lock이 없다는 것이 아니라 대기 시간이 bound 되어있다는 의미로, wait-free와는 달리 자원 경쟁이 있어 기아가 발생할 수 있으나 유한한 시간 내에 공유 자원을 획득할 수 있습니다. Wait-free가 lock-free보다 조건이 엄격하므로 모든 wait-free는 lock-free에도 해당합니다.",
      "references": [
        {"Wait-free": "https://en.wikipedia.org/wiki/Non-blocking_algorithm#Wait-freedom"},
        {"Lock-free": "https://en.wikipedia.org/wiki/Non-blocking_algorithm#Lock-freedom"}
      ]
    }
  ]
}
